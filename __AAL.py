# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AAL', [dirname(__file__)])
        except ImportError:
            import _AAL
            return _AAL
        if fp is not None:
            try:
                _mod = imp.load_module('_AAL', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AAL = swig_import_helper()
    del swig_import_helper
else:
    import _AAL
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AAL.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _AAL.SwigPyIterator_value(self)
    def incr(self, n=1): return _AAL.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _AAL.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _AAL.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _AAL.SwigPyIterator_equal(self, *args)
    def copy(self): return _AAL.SwigPyIterator_copy(self)
    def next(self): return _AAL.SwigPyIterator_next(self)
    def __next__(self): return _AAL.SwigPyIterator___next__(self)
    def previous(self): return _AAL.SwigPyIterator_previous(self)
    def advance(self, *args): return _AAL.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _AAL.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _AAL.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _AAL.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _AAL.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _AAL.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _AAL.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _AAL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Exception(_object):
    """Proxy of C++ AAL::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(AAL::Exception self, char const * str) -> Exception
        __init__(AAL::Exception self, std::string str) -> Exception
        """
        this = _AAL.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_Exception
    __del__ = lambda self : None;
    def what(self):
        """what(Exception self) -> char const *"""
        return _AAL.Exception_what(self)

    def cp866(self):
        """cp866(Exception self) -> char const *"""
        return _AAL.Exception_cp866(self)

    def cp1251(self):
        """cp1251(Exception self) -> char const *"""
        return _AAL.Exception_cp1251(self)

Exception_swigregister = _AAL.Exception_swigregister
Exception_swigregister(Exception)

Smaller = _AAL.Smaller
Equal = _AAL.Equal
Bigger = _AAL.Bigger
class ucharBasicType(_object):
    """Proxy of C++ AAL::BasicType<(AAL::uchar)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucharBasicType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucharBasicType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_numberDigits"] = _AAL.ucharBasicType__numberDigits_set
    __swig_getmethods__["_numberDigits"] = _AAL.ucharBasicType__numberDigits_get
    if _newclass:_numberDigits = _swig_property(_AAL.ucharBasicType__numberDigits_get, _AAL.ucharBasicType__numberDigits_set)
    __swig_setmethods__["_maximumDigits"] = _AAL.ucharBasicType__maximumDigits_set
    __swig_getmethods__["_maximumDigits"] = _AAL.ucharBasicType__maximumDigits_get
    if _newclass:_maximumDigits = _swig_property(_AAL.ucharBasicType__maximumDigits_get, _AAL.ucharBasicType__maximumDigits_set)
    __swig_setmethods__["_digits"] = _AAL.ucharBasicType__digits_set
    __swig_getmethods__["_digits"] = _AAL.ucharBasicType__digits_get
    if _newclass:_digits = _swig_property(_AAL.ucharBasicType__digits_get, _AAL.ucharBasicType__digits_set)
    def __init__(self, *args): 
        """
        __init__(AAL::BasicType<(AAL::uchar)> self) -> ucharBasicType
        __init__(AAL::BasicType<(AAL::uchar)> self, ucharBasicType basicType) -> ucharBasicType
        __init__(AAL::BasicType<(AAL::uchar)> self, unsigned char const number) -> ucharBasicType
        """
        this = _AAL.new_ucharBasicType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_ucharBasicType
    __del__ = lambda self : None;
    def Relocation(self, *args):
        """Relocation(ucharBasicType self, AAL::uint maximumDigits)"""
        return _AAL.ucharBasicType_Relocation(self, *args)

    def PressMemory(self):
        """PressMemory(ucharBasicType self)"""
        return _AAL.ucharBasicType_PressMemory(self)

    def getDigitSizeInBytes(self):
        """getDigitSizeInBytes(ucharBasicType self) -> int"""
        return _AAL.ucharBasicType_getDigitSizeInBytes(self)

    def getDigitSizeInBits(self):
        """getDigitSizeInBits(ucharBasicType self) -> int"""
        return _AAL.ucharBasicType_getDigitSizeInBits(self)

    def getNumberBits(self):
        """getNumberBits(ucharBasicType self) -> AAL::uint"""
        return _AAL.ucharBasicType_getNumberBits(self)

    def getNumberBytes(self):
        """getNumberBytes(ucharBasicType self) -> AAL::uint"""
        return _AAL.ucharBasicType_getNumberBytes(self)

    def getNumberDigits(self):
        """getNumberDigits(ucharBasicType self) -> AAL::uint"""
        return _AAL.ucharBasicType_getNumberDigits(self)

    def getMaximumDigits(self):
        """getMaximumDigits(ucharBasicType self) -> AAL::uint"""
        return _AAL.ucharBasicType_getMaximumDigits(self)

    def getFirstTrueBit(self):
        """getFirstTrueBit(ucharBasicType self) -> AAL::uint"""
        return _AAL.ucharBasicType_getFirstTrueBit(self)

    def getBit(self, *args):
        """getBit(ucharBasicType self, AAL::uint position) -> bool"""
        return _AAL.ucharBasicType_getBit(self, *args)

    def setBit(self, *args):
        """
        setBit(ucharBasicType self, AAL::uint position, bool value=True)
        setBit(ucharBasicType self, AAL::uint position)
        """
        return _AAL.ucharBasicType_setBit(self, *args)

    def getDigit(self, *args):
        """getDigit(ucharBasicType self, AAL::uint position) -> unsigned char"""
        return _AAL.ucharBasicType_getDigit(self, *args)

    def setDigit(self, *args):
        """setDigit(ucharBasicType self, AAL::uint position, unsigned char value)"""
        return _AAL.ucharBasicType_setDigit(self, *args)

    def isZero(self):
        """isZero(ucharBasicType self) -> bool"""
        return _AAL.ucharBasicType_isZero(self)

    def isOne(self):
        """isOne(ucharBasicType self) -> bool"""
        return _AAL.ucharBasicType_isOne(self)

ucharBasicType_swigregister = _AAL.ucharBasicType_swigregister
ucharBasicType_swigregister(ucharBasicType)

class uintBasicType(_object):
    """Proxy of C++ AAL::BasicType<(AAL::uint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintBasicType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintBasicType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_numberDigits"] = _AAL.uintBasicType__numberDigits_set
    __swig_getmethods__["_numberDigits"] = _AAL.uintBasicType__numberDigits_get
    if _newclass:_numberDigits = _swig_property(_AAL.uintBasicType__numberDigits_get, _AAL.uintBasicType__numberDigits_set)
    __swig_setmethods__["_maximumDigits"] = _AAL.uintBasicType__maximumDigits_set
    __swig_getmethods__["_maximumDigits"] = _AAL.uintBasicType__maximumDigits_get
    if _newclass:_maximumDigits = _swig_property(_AAL.uintBasicType__maximumDigits_get, _AAL.uintBasicType__maximumDigits_set)
    __swig_setmethods__["_digits"] = _AAL.uintBasicType__digits_set
    __swig_getmethods__["_digits"] = _AAL.uintBasicType__digits_get
    if _newclass:_digits = _swig_property(_AAL.uintBasicType__digits_get, _AAL.uintBasicType__digits_set)
    def __init__(self, *args): 
        """
        __init__(AAL::BasicType<(AAL::uint)> self) -> uintBasicType
        __init__(AAL::BasicType<(AAL::uint)> self, uintBasicType basicType) -> uintBasicType
        __init__(AAL::BasicType<(AAL::uint)> self, unsigned int const number) -> uintBasicType
        """
        this = _AAL.new_uintBasicType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_uintBasicType
    __del__ = lambda self : None;
    def Relocation(self, *args):
        """Relocation(uintBasicType self, AAL::uint maximumDigits)"""
        return _AAL.uintBasicType_Relocation(self, *args)

    def PressMemory(self):
        """PressMemory(uintBasicType self)"""
        return _AAL.uintBasicType_PressMemory(self)

    def getDigitSizeInBytes(self):
        """getDigitSizeInBytes(uintBasicType self) -> int"""
        return _AAL.uintBasicType_getDigitSizeInBytes(self)

    def getDigitSizeInBits(self):
        """getDigitSizeInBits(uintBasicType self) -> int"""
        return _AAL.uintBasicType_getDigitSizeInBits(self)

    def getNumberBits(self):
        """getNumberBits(uintBasicType self) -> AAL::uint"""
        return _AAL.uintBasicType_getNumberBits(self)

    def getNumberBytes(self):
        """getNumberBytes(uintBasicType self) -> AAL::uint"""
        return _AAL.uintBasicType_getNumberBytes(self)

    def getNumberDigits(self):
        """getNumberDigits(uintBasicType self) -> AAL::uint"""
        return _AAL.uintBasicType_getNumberDigits(self)

    def getMaximumDigits(self):
        """getMaximumDigits(uintBasicType self) -> AAL::uint"""
        return _AAL.uintBasicType_getMaximumDigits(self)

    def getFirstTrueBit(self):
        """getFirstTrueBit(uintBasicType self) -> AAL::uint"""
        return _AAL.uintBasicType_getFirstTrueBit(self)

    def getBit(self, *args):
        """getBit(uintBasicType self, AAL::uint position) -> bool"""
        return _AAL.uintBasicType_getBit(self, *args)

    def setBit(self, *args):
        """
        setBit(uintBasicType self, AAL::uint position, bool value=True)
        setBit(uintBasicType self, AAL::uint position)
        """
        return _AAL.uintBasicType_setBit(self, *args)

    def getDigit(self, *args):
        """getDigit(uintBasicType self, AAL::uint position) -> unsigned int"""
        return _AAL.uintBasicType_getDigit(self, *args)

    def setDigit(self, *args):
        """setDigit(uintBasicType self, AAL::uint position, unsigned int value)"""
        return _AAL.uintBasicType_setDigit(self, *args)

    def isZero(self):
        """isZero(uintBasicType self) -> bool"""
        return _AAL.uintBasicType_isZero(self)

    def isOne(self):
        """isOne(uintBasicType self) -> bool"""
        return _AAL.uintBasicType_isOne(self)

uintBasicType_swigregister = _AAL.uintBasicType_swigregister
uintBasicType_swigregister(uintBasicType)

Hex = _AAL.Hex
Dec = _AAL.Dec
Oct = _AAL.Oct
Bin = _AAL.Bin
Tern = _AAL.Tern
class Integer(uintBasicType):
    """Proxy of C++ AAL::Integer class"""
    __swig_setmethods__ = {}
    for _s in [uintBasicType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integer, name, value)
    __swig_getmethods__ = {}
    for _s in [uintBasicType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Integer, name)
    def __init__(self, *args): 
        """
        __init__(AAL::Integer self) -> Integer
        __init__(AAL::Integer self, Integer integer) -> Integer
        __init__(AAL::Integer self, int const number) -> Integer
        __init__(AAL::Integer self, std::string const dataString, AAL::NumericSystem system=Dec) -> Integer
        __init__(AAL::Integer self, std::string const dataString) -> Integer
        """
        this = _AAL.new_Integer(*args)
        try: self.this.append(this)
        except: self.this = this
    def Parse(self, *args):
        """
        Parse(Integer self, std::string const dataString, AAL::NumericSystem system=Dec) -> Integer
        Parse(Integer self, std::string const dataString) -> Integer
        """
        return _AAL.Integer_Parse(self, *args)

    def ToString(self, *args):
        """
        ToString(Integer self, AAL::NumericSystem system=Dec) -> std::string
        ToString(Integer self) -> std::string
        """
        return _AAL.Integer_ToString(self, *args)

    def strr(self):
        """strr(Integer self) -> std::string"""
        return _AAL.Integer_strr(self)

    def TestLukaLemera(self, *args):
        """TestLukaLemera(Integer self, Integer degree) -> bool"""
        return _AAL.Integer_TestLukaLemera(self, *args)

    def ModifiedTestLuka(self, *args):
        """ModifiedTestLuka(Integer self, DecompositionMemberVector vector, Integer Mersen_Number) -> bool"""
        return _AAL.Integer_ModifiedTestLuka(self, *args)

    def TestPoklingtona(self, *args):
        """TestPoklingtona(Integer self, DecompositionMemberVector vector, Integer Mersen_Number) -> bool"""
        return _AAL.Integer_TestPoklingtona(self, *args)

    def Euler(self, *args):
        """Euler(Integer self, DecompositionMemberVector vector) -> Integer"""
        return _AAL.Integer_Euler(self, *args)

    def setOne(self, sign=False):
        """
        setOne(Integer self, bool sign=False) -> Integer
        setOne(Integer self) -> Integer
        """
        return _AAL.Integer_setOne(self, sign)

    def setNumber(self, *args):
        """
        setNumber(Integer self, AAL::uint number, bool sign=False) -> Integer
        setNumber(Integer self, AAL::uint number) -> Integer
        """
        return _AAL.Integer_setNumber(self, *args)

    def setZero(self):
        """setZero(Integer self) -> Integer"""
        return _AAL.Integer_setZero(self)

    def setPositive(self):
        """setPositive(Integer self) -> Integer"""
        return _AAL.Integer_setPositive(self)

    def isOne(self):
        """isOne(Integer self) -> bool"""
        return _AAL.Integer_isOne(self)

    def isNumber(self, *args):
        """
        isNumber(Integer self, AAL::uint number, bool sign=False) -> bool
        isNumber(Integer self, AAL::uint number) -> bool
        """
        return _AAL.Integer_isNumber(self, *args)

    def isNegative(self):
        """isNegative(Integer self) -> bool"""
        return _AAL.Integer_isNegative(self)

    def isPositive(self):
        """isPositive(Integer self) -> bool"""
        return _AAL.Integer_isPositive(self)

    def isEven(self):
        """isEven(Integer self) -> bool"""
        return _AAL.Integer_isEven(self)

    def isOdd(self):
        """isOdd(Integer self) -> bool"""
        return _AAL.Integer_isOdd(self)

    def isPrime(self):
        """isPrime(Integer self) -> bool"""
        return _AAL.Integer_isPrime(self)

    def __neg__(self):
        """__neg__(Integer self) -> Integer"""
        return _AAL.Integer___neg__(self)

    def Negate(self):
        """Negate(Integer self) -> Integer"""
        return _AAL.Integer_Negate(self)

    def __pos__(self):
        """__pos__(Integer self) -> Integer"""
        return _AAL.Integer___pos__(self)

    def __invert__(self):
        """__invert__(Integer self) -> Integer"""
        return _AAL.Integer___invert__(self)

    def OnesComplement(self):
        """OnesComplement(Integer self) -> Integer"""
        return _AAL.Integer_OnesComplement(self)

    def Compare(self, *args):
        """Compare(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer_Compare(self, *args)

    def __ixor__(self, *args):
        """__ixor__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___ixor__(self, *args)

    def Xor(self, *args):
        """Xor(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Xor(self, *args)

    def __ior__(self, *args):
        """__ior__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___ior__(self, *args)

    def Or(self, *args):
        """Or(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Or(self, *args)

    def __iand__(self, *args):
        """__iand__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___iand__(self, *args)

    def And(self, *args):
        """And(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_And(self, *args)

    def Not(self, *args):
        """Not(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer_Not(self, *args)

    def __lshift__(self, *args):
        """__lshift__(Integer self, int numberBits) -> Integer"""
        return _AAL.Integer___lshift__(self, *args)

    def __ilshift__(self, *args):
        """__ilshift__(Integer self, int numberBits) -> Integer"""
        return _AAL.Integer___ilshift__(self, *args)

    def __rshift__(self, *args):
        """__rshift__(Integer self, int numberBits) -> Integer"""
        return _AAL.Integer___rshift__(self, *args)

    def __irshift__(self, *args):
        """__irshift__(Integer self, int numberBits) -> Integer"""
        return _AAL.Integer___irshift__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___iadd__(self, *args)

    def Add(self, *args):
        """Add(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Add(self, *args)

    def ModAdd(self, *args):
        """ModAdd(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_ModAdd(self, *args)

    def ModAddInFp(self, *args):
        """ModAddInFp(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_ModAddInFp(self, *args)

    def __isub__(self, *args):
        """__isub__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___isub__(self, *args)

    def Sub(self, *args):
        """Sub(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Sub(self, *args)

    def ModSub(self, *args):
        """ModSub(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_ModSub(self, *args)

    def SubInFp(self, *args):
        """SubInFp(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_SubInFp(self, *args)

    def __imul__(self, *args):
        """__imul__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___imul__(self, *args)

    def Mul(self, *args):
        """Mul(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Mul(self, *args)

    def ModMul(self, *args):
        """ModMul(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_ModMul(self, *args)

    def MulInFp(self, *args):
        """MulInFp(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_MulInFp(self, *args)

    def __idiv__(self, *args):
        """__idiv__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___idiv__(self, *args)

    def Div(self, *args):
        """
        Div(Integer self, Integer a, Integer b, Integer remainder=None) -> Integer
        Div(Integer self, Integer a, Integer b) -> Integer
        """
        return _AAL.Integer_Div(self, *args)

    def ModDiv(self, *args):
        """
        ModDiv(Integer self, Integer a, Integer b, Integer module, Integer remainder=None) -> Integer
        ModDiv(Integer self, Integer a, Integer b, Integer module) -> Integer
        """
        return _AAL.Integer_ModDiv(self, *args)

    def DivInFp(self, *args):
        """DivInFp(Integer self, Integer a, Integer b, Integer module, Integer remainder) -> Integer"""
        return _AAL.Integer_DivInFp(self, *args)

    def __imod__(self, *args):
        """__imod__(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer___imod__(self, *args)

    def Mod(self, *args):
        """Mod(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Mod(self, *args)

    def ModPositive(self, *args):
        """ModPositive(Integer self, Integer module) -> Integer"""
        return _AAL.Integer_ModPositive(self, *args)

    def Pow(self, *args):
        """Pow(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Pow(self, *args)

    def ModPow(self, *args):
        """ModPow(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_ModPow(self, *args)

    def PowInFp(self, *args):
        """PowInFp(Integer self, Integer a, Integer b, Integer module) -> Integer"""
        return _AAL.Integer_PowInFp(self, *args)

    def Sqrt(self, *args):
        """
        Sqrt(Integer self) -> Integer
        Sqrt(Integer self, Integer integer) -> Integer
        """
        return _AAL.Integer_Sqrt(self, *args)

    def SquareRoot(self, *args):
        """SquareRoot(Integer self, Integer integer) -> Integer"""
        return _AAL.Integer_SquareRoot(self, *args)

    def Euclid(self, *args):
        """Euclid(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_Euclid(self, *args)

    def BinaryGCD(self, *args):
        """BinaryGCD(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_BinaryGCD(self, *args)

    def ExEuclid(self, *args):
        """ExEuclid(Integer self, Integer a, Integer b, Integer x, Integer y) -> Integer"""
        return _AAL.Integer_ExEuclid(self, *args)

    def SCM(self, *args):
        """SCM(Integer self, Integer a, Integer b) -> Integer"""
        return _AAL.Integer_SCM(self, *args)

    def Generate(self, *args):
        """
        Generate(Integer self, AAL::uint numberBits) -> Integer
        Generate(Integer self, Integer module) -> Integer
        """
        return _AAL.Integer_Generate(self, *args)

    def GenerateOdd(self, *args):
        """
        GenerateOdd(Integer self, AAL::uint numberBits) -> Integer
        GenerateOdd(Integer self, Integer module) -> Integer
        """
        return _AAL.Integer_GenerateOdd(self, *args)

    def GeneratePrime(self, *args):
        """
        GeneratePrime(Integer self, AAL::uint numberBits) -> Integer
        GeneratePrime(Integer self, Integer module) -> Integer
        GeneratePrime(Integer self, Integer module, DecompositionMemberVector vector) -> Integer
        """
        return _AAL.Integer_GeneratePrime(self, *args)

    def WrappingGenerate(self, *args):
        """WrappingGenerate(Integer self, Integer forwrap, Integer module) -> Integer"""
        return _AAL.Integer_WrappingGenerate(self, *args)

    def LegendreSymbol(self, *args):
        """LegendreSymbol(Integer self, Integer module) -> int"""
        return _AAL.Integer_LegendreSymbol(self, *args)

    def JacobySymbol(self, *args):
        """JacobySymbol(Integer self, Integer n) -> int"""
        return _AAL.Integer_JacobySymbol(self, *args)

    def InMulGroup(self, *args):
        """InMulGroup(Integer self, Integer groupModule) -> bool"""
        return _AAL.Integer_InMulGroup(self, *args)

    def InMulGroupInFp(self, *args):
        """InMulGroupInFp(Integer self, Integer groupModule) -> bool"""
        return _AAL.Integer_InMulGroupInFp(self, *args)

    def Inverse(self, *args):
        """
        Inverse(Integer self, Integer module) -> Integer
        Inverse(Integer self, Integer integer, Integer module) -> Integer
        """
        return _AAL.Integer_Inverse(self, *args)

    def InverseInFp(self, *args):
        """InverseInFp(Integer self, Integer integer, Integer module) -> Integer"""
        return _AAL.Integer_InverseInFp(self, *args)

    def ModSqrt(self, *args):
        """
        ModSqrt(Integer self, Integer module) -> Integer
        ModSqrt(Integer self, Integer integer, Integer module) -> Integer
        """
        return _AAL.Integer_ModSqrt(self, *args)

    def elementOrder(self, *args):
        """elementOrder(Integer self, Integer groupModule, Integer num, DecompositionMemberVector vector, Integer ord) -> Integer"""
        return _AAL.Integer_elementOrder(self, *args)

    def isGenerator(self, *args):
        """
        isGenerator(Integer self, Integer module, DecompositionMemberVector mulGroupOrdDecomposition) -> bool
        isGenerator(Integer self, Integer groupModule, Integer num, DecompositionMemberVector vector, Integer ord) -> bool
        """
        return _AAL.Integer_isGenerator(self, *args)

    def __repr__(self):
        """__repr__(Integer self) -> char *"""
        return _AAL.Integer___repr__(self)

    __swig_destroy__ = _AAL.delete_Integer
    __del__ = lambda self : None;
Integer_swigregister = _AAL.Integer_swigregister
Integer_swigregister(Integer)

class DecompositionMember(_object):
    """Proxy of C++ AAL::DecompositionMember class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompositionMember, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecompositionMember, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(AAL::DecompositionMember self) -> DecompositionMember
        __init__(AAL::DecompositionMember self, Integer number, Integer degree) -> DecompositionMember
        __init__(AAL::DecompositionMember self, DecompositionMember member) -> DecompositionMember
        """
        this = _AAL.new_DecompositionMember(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_DecompositionMember
    __del__ = lambda self : None;
    def getNumber(self):
        """getNumber(DecompositionMember self) -> Integer"""
        return _AAL.DecompositionMember_getNumber(self)

    def getDegree(self):
        """getDegree(DecompositionMember self) -> Integer"""
        return _AAL.DecompositionMember_getDegree(self)

    def isRightDecomposition(*args):
        """isRightDecomposition(Integer number, DecompositionMemberVector decomposition) -> bool"""
        return _AAL.DecompositionMember_isRightDecomposition(*args)

    if _newclass:isRightDecomposition = staticmethod(isRightDecomposition)
    __swig_getmethods__["isRightDecomposition"] = lambda x: isRightDecomposition
DecompositionMember_swigregister = _AAL.DecompositionMember_swigregister
DecompositionMember_swigregister(DecompositionMember)

def DecompositionMember_isRightDecomposition(*args):
  """DecompositionMember_isRightDecomposition(Integer number, DecompositionMemberVector decomposition) -> bool"""
  return _AAL.DecompositionMember_isRightDecomposition(*args)

class DecompositionManager(_object):
    """Proxy of C++ AAL::DecompositionManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompositionManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecompositionManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["withOneOddTwoDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneOddTwoDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneOddTwoDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneOddTwoDecompositionCompositeDegrees_get
    if _newclass:withOneOddTwoDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneOddTwoDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneOddTwoDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneOddTwoDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneOddTwoDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeDegrees_get
    if _newclass:withoutOneOddTwoDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeDegrees_set)
    __swig_setmethods__["EvenLargeTwoWithOneDecompositionCompositeDegrees"] = _AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeDegrees_set
    __swig_getmethods__["EvenLargeTwoWithOneDecompositionCompositeDegrees"] = _AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeDegrees_get
    if _newclass:EvenLargeTwoWithOneDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeDegrees_get, _AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeDegrees_set)
    __swig_setmethods__["EvenTwoWithOneDecompositionCompositeDegrees"] = _AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeDegrees_set
    __swig_getmethods__["EvenTwoWithOneDecompositionCompositeDegrees"] = _AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeDegrees_get
    if _newclass:EvenTwoWithOneDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeDegrees_get, _AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneThreeDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneThreeDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneThreeDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneThreeDecompositionCompositeDegrees_get
    if _newclass:withOneThreeDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneThreeDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneThreeDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneThreeDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneThreeDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneThreeDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneThreeDecompositionCompositeDegrees_get
    if _newclass:withoutOneThreeDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneThreeDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneThreeDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneFiveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneFiveDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneFiveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneFiveDecompositionCompositeDegrees_get
    if _newclass:withOneFiveDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneFiveDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneFiveDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneFiveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneFiveDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneFiveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneFiveDecompositionCompositeDegrees_get
    if _newclass:withoutOneFiveDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneFiveDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneFiveDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneSixDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneSixDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneSixDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneSixDecompositionCompositeDegrees_get
    if _newclass:withOneSixDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneSixDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneSixDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneSixDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneSixDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneSixDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneSixDecompositionCompositeDegrees_get
    if _newclass:withoutOneSixDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneSixDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneSixDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneSevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneSevenDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneSevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneSevenDecompositionCompositeDegrees_get
    if _newclass:withOneSevenDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneSevenDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneSevenDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneSevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneSevenDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneSevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneSevenDecompositionCompositeDegrees_get
    if _newclass:withoutOneSevenDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneSevenDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneSevenDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneOddTenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneOddTenDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneOddTenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneOddTenDecompositionCompositeDegrees_get
    if _newclass:withOneOddTenDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneOddTenDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneOddTenDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneOddTenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneOddTenDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneOddTenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneOddTenDecompositionCompositeDegrees_get
    if _newclass:withoutOneOddTenDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneOddTenDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneOddTenDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneElevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneElevenDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneElevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneElevenDecompositionCompositeDegrees_get
    if _newclass:withOneElevenDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneElevenDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneElevenDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneElevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneElevenDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneElevenDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneElevenDecompositionCompositeDegrees_get
    if _newclass:withoutOneElevenDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneElevenDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneElevenDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneTwelveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneTwelveDecompositionCompositeDegrees_set
    __swig_getmethods__["withOneTwelveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withOneTwelveDecompositionCompositeDegrees_get
    if _newclass:withOneTwelveDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withOneTwelveDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withOneTwelveDecompositionCompositeDegrees_set)
    __swig_setmethods__["withoutOneTwelveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeDegrees_set
    __swig_getmethods__["withoutOneTwelveDecompositionCompositeDegrees"] = _AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeDegrees_get
    if _newclass:withoutOneTwelveDecompositionCompositeDegrees = _swig_property(_AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeDegrees_get, _AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeDegrees_set)
    __swig_setmethods__["withOneOddTwoDecompositionCompositCount"] = _AAL.DecompositionManager_withOneOddTwoDecompositionCompositCount_set
    __swig_getmethods__["withOneOddTwoDecompositionCompositCount"] = _AAL.DecompositionManager_withOneOddTwoDecompositionCompositCount_get
    if _newclass:withOneOddTwoDecompositionCompositCount = _swig_property(_AAL.DecompositionManager_withOneOddTwoDecompositionCompositCount_get, _AAL.DecompositionManager_withOneOddTwoDecompositionCompositCount_set)
    __swig_setmethods__["withoutOneOddTwoDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneOddTwoDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeCount_get
    if _newclass:withoutOneOddTwoDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneOddTwoDecompositionCompositeCount_set)
    __swig_setmethods__["EvenLargeTwoWithOneDecompositionCompositeCount"] = _AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeCount_set
    __swig_getmethods__["EvenLargeTwoWithOneDecompositionCompositeCount"] = _AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeCount_get
    if _newclass:EvenLargeTwoWithOneDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeCount_get, _AAL.DecompositionManager_EvenLargeTwoWithOneDecompositionCompositeCount_set)
    __swig_setmethods__["EvenTwoWithOneDecompositionCompositeCount"] = _AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeCount_set
    __swig_getmethods__["EvenTwoWithOneDecompositionCompositeCount"] = _AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeCount_get
    if _newclass:EvenTwoWithOneDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeCount_get, _AAL.DecompositionManager_EvenTwoWithOneDecompositionCompositeCount_set)
    __swig_setmethods__["withOneThreeDecompositionCompositCount"] = _AAL.DecompositionManager_withOneThreeDecompositionCompositCount_set
    __swig_getmethods__["withOneThreeDecompositionCompositCount"] = _AAL.DecompositionManager_withOneThreeDecompositionCompositCount_get
    if _newclass:withOneThreeDecompositionCompositCount = _swig_property(_AAL.DecompositionManager_withOneThreeDecompositionCompositCount_get, _AAL.DecompositionManager_withOneThreeDecompositionCompositCount_set)
    __swig_setmethods__["withoutOneThreeDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneThreeDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneThreeDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneThreeDecompositionCompositeCount_get
    if _newclass:withoutOneThreeDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneThreeDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneThreeDecompositionCompositeCount_set)
    __swig_setmethods__["withOneFiveDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneFiveDecompositionCompositeCount_set
    __swig_getmethods__["withOneFiveDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneFiveDecompositionCompositeCount_get
    if _newclass:withOneFiveDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withOneFiveDecompositionCompositeCount_get, _AAL.DecompositionManager_withOneFiveDecompositionCompositeCount_set)
    __swig_setmethods__["withoutOneFiveDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneFiveDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneFiveDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneFiveDecompositionCompositeCount_get
    if _newclass:withoutOneFiveDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneFiveDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneFiveDecompositionCompositeCount_set)
    __swig_setmethods__["withOneSixDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneSixDecompositionCompositeCount_set
    __swig_getmethods__["withOneSixDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneSixDecompositionCompositeCount_get
    if _newclass:withOneSixDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withOneSixDecompositionCompositeCount_get, _AAL.DecompositionManager_withOneSixDecompositionCompositeCount_set)
    __swig_setmethods__["withoutOneSixDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneSixDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneSixDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneSixDecompositionCompositeCount_get
    if _newclass:withoutOneSixDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneSixDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneSixDecompositionCompositeCount_set)
    __swig_setmethods__["withOneSevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneSevenDecompositionCompositeCount_set
    __swig_getmethods__["withOneSevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneSevenDecompositionCompositeCount_get
    if _newclass:withOneSevenDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withOneSevenDecompositionCompositeCount_get, _AAL.DecompositionManager_withOneSevenDecompositionCompositeCount_set)
    __swig_setmethods__["withoutOneSevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneSevenDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneSevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneSevenDecompositionCompositeCount_get
    if _newclass:withoutOneSevenDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneSevenDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneSevenDecompositionCompositeCount_set)
    __swig_setmethods__["withOneOddTenDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneOddTenDecompositionCompositeCount_set
    __swig_getmethods__["withOneOddTenDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneOddTenDecompositionCompositeCount_get
    if _newclass:withOneOddTenDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withOneOddTenDecompositionCompositeCount_get, _AAL.DecompositionManager_withOneOddTenDecompositionCompositeCount_set)
    __swig_setmethods__["withoutOneOddTenDecompositionCompositCount"] = _AAL.DecompositionManager_withoutOneOddTenDecompositionCompositCount_set
    __swig_getmethods__["withoutOneOddTenDecompositionCompositCount"] = _AAL.DecompositionManager_withoutOneOddTenDecompositionCompositCount_get
    if _newclass:withoutOneOddTenDecompositionCompositCount = _swig_property(_AAL.DecompositionManager_withoutOneOddTenDecompositionCompositCount_get, _AAL.DecompositionManager_withoutOneOddTenDecompositionCompositCount_set)
    __swig_setmethods__["withOneElevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneElevenDecompositionCompositeCount_set
    __swig_getmethods__["withOneElevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneElevenDecompositionCompositeCount_get
    if _newclass:withOneElevenDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withOneElevenDecompositionCompositeCount_get, _AAL.DecompositionManager_withOneElevenDecompositionCompositeCount_set)
    __swig_setmethods__["withoutOneElevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneElevenDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneElevenDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneElevenDecompositionCompositeCount_get
    if _newclass:withoutOneElevenDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneElevenDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneElevenDecompositionCompositeCount_set)
    __swig_setmethods__["withOneTwelveDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneTwelveDecompositionCompositeCount_set
    __swig_getmethods__["withOneTwelveDecompositionCompositeCount"] = _AAL.DecompositionManager_withOneTwelveDecompositionCompositeCount_get
    if _newclass:withOneTwelveDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withOneTwelveDecompositionCompositeCount_get, _AAL.DecompositionManager_withOneTwelveDecompositionCompositeCount_set)
    __swig_setmethods__["withoutOneTwelveDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeCount_set
    __swig_getmethods__["withoutOneTwelveDecompositionCompositeCount"] = _AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeCount_get
    if _newclass:withoutOneTwelveDecompositionCompositeCount = _swig_property(_AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeCount_get, _AAL.DecompositionManager_withoutOneTwelveDecompositionCompositeCount_set)
    def Instance():
        """Instance() -> DecompositionManager"""
        return _AAL.DecompositionManager_Instance()

    if _newclass:Instance = staticmethod(Instance)
    __swig_getmethods__["Instance"] = lambda x: Instance
    def NumberGenerator(*args):
        """NumberGenerator(std::string addres, std::string str_addres)"""
        return _AAL.DecompositionManager_NumberGenerator(*args)

    if _newclass:NumberGenerator = staticmethod(NumberGenerator)
    __swig_getmethods__["NumberGenerator"] = lambda x: NumberGenerator
    def FindEqualNumberInTheDecompositionsDB(*args):
        """FindEqualNumberInTheDecompositionsDB(Integer nmbr) -> std::string"""
        return _AAL.DecompositionManager_FindEqualNumberInTheDecompositionsDB(*args)

    if _newclass:FindEqualNumberInTheDecompositionsDB = staticmethod(FindEqualNumberInTheDecompositionsDB)
    __swig_getmethods__["FindEqualNumberInTheDecompositionsDB"] = lambda x: FindEqualNumberInTheDecompositionsDB
    def hevComposit(self, *args):
        """hevComposit(DecompositionManager self, unsigned int [] CompositeDegrees, AAL::uint n, AAL::uint degree) -> bool"""
        return _AAL.DecompositionManager_hevComposit(self, *args)

    def TestComposit(self, *args):
        """TestComposit(DecompositionManager self, std::string addres, AAL::uint degree) -> bool"""
        return _AAL.DecompositionManager_TestComposit(self, *args)

    def getDecomposition(self, *args):
        """getDecomposition(DecompositionManager self, Integer number, bool * composit) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getDecomposition(self, *args)

    def FindBase(self, *args):
        """FindBase(DecompositionManager self, Integer num) -> IntVector"""
        return _AAL.DecompositionManager_FindBase(self, *args)

    def getDecompositionFromFile(self, *args):
        """getDecompositionFromFile(DecompositionManager self, std::string str_addres, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getDecompositionFromFile(self, *args)

    def getCheckedDecompositionFromFile(self, *args):
        """getCheckedDecompositionFromFile(DecompositionManager self, AAL::uint degree, AAL::uint maxDegree, std::string fileName) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getCheckedDecompositionFromFile(self, *args)

    def getTenDegreeDecomposition(self, *args):
        """getTenDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getTenDegreeDecomposition(self, *args)

    def getTwoDegreeDecomposition(self, *args):
        """getTwoDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getTwoDegreeDecomposition(self, *args)

    def getOddTwoDegreeDecomposition(self, *args):
        """getOddTwoDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getOddTwoDegreeDecomposition(self, *args)

    def getEvenLargeTwoDegreeWithOneDecomposition(self, *args):
        """getEvenLargeTwoDegreeWithOneDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getEvenLargeTwoDegreeWithOneDecomposition(self, *args)

    def getEvenTwoDegreeWithOneDecomposition(self, *args):
        """getEvenTwoDegreeWithOneDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getEvenTwoDegreeWithOneDecomposition(self, *args)

    def getThreeDegreeDecomposition(self, *args):
        """getThreeDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getThreeDegreeDecomposition(self, *args)

    def getFiveDegreeDecomposition(self, *args):
        """getFiveDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getFiveDegreeDecomposition(self, *args)

    def getSixDegreeDecomposition(self, *args):
        """getSixDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSixDegreeDecomposition(self, *args)

    def getSevenDegreeDecomposition(self, *args):
        """getSevenDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSevenDegreeDecomposition(self, *args)

    def getOddTenDegreeDecomposition(self, *args):
        """getOddTenDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getOddTenDegreeDecomposition(self, *args)

    def getElevenDegreeDecomposition(self, *args):
        """getElevenDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getElevenDegreeDecomposition(self, *args)

    def getTwelveDegreeDecomposition(self, *args):
        """getTwelveDegreeDecomposition(DecompositionManager self, AAL::uint degree, bool withOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getTwelveDegreeDecomposition(self, *args)

    def getSpecialTenDegreeDecomposition(self, *args):
        """getSpecialTenDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialTenDegreeDecomposition(self, *args)

    def getSpecialTwoDegreeDecomposition(self, *args):
        """getSpecialTwoDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialTwoDegreeDecomposition(self, *args)

    def getSpecialOddTwoDegreeDecomposition(self, *args):
        """getSpecialOddTwoDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialOddTwoDegreeDecomposition(self, *args)

    def getSpecialEvenLargeTwoDegreeWithOneDecomposition(self, *args):
        """getSpecialEvenLargeTwoDegreeWithOneDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialEvenLargeTwoDegreeWithOneDecomposition(self, *args)

    def getSpecialEvenTwoDegreeWithOneDecomposition(self, *args):
        """getSpecialEvenTwoDegreeWithOneDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialEvenTwoDegreeWithOneDecomposition(self, *args)

    def getSpecialThreeDegreeDecomposition(self, *args):
        """getSpecialThreeDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialThreeDegreeDecomposition(self, *args)

    def getSpecialFiveDegreeDecomposition(self, *args):
        """getSpecialFiveDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialFiveDegreeDecomposition(self, *args)

    def getSpecialSixDegreeDecomposition(self, *args):
        """getSpecialSixDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialSixDegreeDecomposition(self, *args)

    def getSpecialSevenDegreeDecomposition(self, *args):
        """getSpecialSevenDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialSevenDegreeDecomposition(self, *args)

    def getSpecialOddTenDegreeDecomposition(self, *args):
        """getSpecialOddTenDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialOddTenDegreeDecomposition(self, *args)

    def getSpecialElevenDegreeDecomposition(self, *args):
        """getSpecialElevenDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialElevenDegreeDecomposition(self, *args)

    def getSpecialTwelveDegreeDecomposition(self, *args):
        """getSpecialTwelveDegreeDecomposition(DecompositionManager self, AAL::uint degree) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialTwelveDegreeDecomposition(self, *args)

    def getSpecialDecomposition(self, *args):
        """getSpecialDecomposition(DecompositionManager self, DecompositionMemberVector vectorWithOne, DecompositionMemberVector vectorWithoutOne) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getSpecialDecomposition(self, *args)

    def getDecompositionFromDB(self, *args):
        """getDecompositionFromDB(DecompositionManager self, Integer number, bool * composit) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getDecompositionFromDB(self, *args)

    def logTime(self, *args):
        """logTime(DecompositionManager self, FILE * f, int checkpoint)"""
        return _AAL.DecompositionManager_logTime(self, *args)

    def getPrimeDecomposition(self, *args):
        """getPrimeDecomposition(DecompositionManager self, AAL::uint number) -> DecompositionMemberVector"""
        return _AAL.DecompositionManager_getPrimeDecomposition(self, *args)

    __swig_destroy__ = _AAL.delete_DecompositionManager
    __del__ = lambda self : None;
DecompositionManager_swigregister = _AAL.DecompositionManager_swigregister
DecompositionManager_swigregister(DecompositionManager)

def DecompositionManager_Instance():
  """DecompositionManager_Instance() -> DecompositionManager"""
  return _AAL.DecompositionManager_Instance()

def DecompositionManager_NumberGenerator(*args):
  """DecompositionManager_NumberGenerator(std::string addres, std::string str_addres)"""
  return _AAL.DecompositionManager_NumberGenerator(*args)

def DecompositionManager_FindEqualNumberInTheDecompositionsDB(*args):
  """DecompositionManager_FindEqualNumberInTheDecompositionsDB(Integer nmbr) -> std::string"""
  return _AAL.DecompositionManager_FindEqualNumberInTheDecompositionsDB(*args)

class PrimeTester(_object):
    """Proxy of C++ AAL::PrimeTester class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimeTester, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimeTester, name)
    def __init__(self, *args): 
        """__init__(AAL::PrimeTester self, Integer number) -> PrimeTester"""
        this = _AAL.new_PrimeTester(*args)
        try: self.this.append(this)
        except: self.this = this
    def TestLukaLemera(self, *args):
        """TestLukaLemera(PrimeTester self, Integer degree) -> bool"""
        return _AAL.PrimeTester_TestLukaLemera(self, *args)

    def ModifiedTestLuka(self, *args):
        """ModifiedTestLuka(PrimeTester self, DecompositionMemberVector vector) -> bool"""
        return _AAL.PrimeTester_ModifiedTestLuka(self, *args)

    def TestPoklingtona(self, *args):
        """TestPoklingtona(PrimeTester self, DecompositionMemberVector vector) -> bool"""
        return _AAL.PrimeTester_TestPoklingtona(self, *args)

    def __repr__(self):
        """__repr__(PrimeTester self) -> char *"""
        return _AAL.PrimeTester___repr__(self)

    __swig_destroy__ = _AAL.delete_PrimeTester
    __del__ = lambda self : None;
PrimeTester_swigregister = _AAL.PrimeTester_swigregister
PrimeTester_swigregister(PrimeTester)

class Matrix(_object):
    """Proxy of C++ AAL::Matrix class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    ON_LINE = _AAL.Matrix_ON_LINE
    ON_COLUMN = _AAL.Matrix_ON_COLUMN
    NONE = _AAL.Matrix_NONE
    RIGHT = _AAL.Matrix_RIGHT
    LEFT = _AAL.Matrix_LEFT
    def __init__(self, *args): 
        """
        __init__(AAL::Matrix self) -> Matrix
        __init__(AAL::Matrix self, Matrix matrix) -> Matrix
        __init__(AAL::Matrix self, AAL::Matrix::CodingSystem aCodeWord, AAL::uint aColCount, AAL::uint aRowCount) -> Matrix
        __init__(AAL::Matrix self, AAL::Matrix::CodingSystem aCodeWord, AAL::uint aColCount, AAL::uint aRowCount, bool aValue) -> Matrix
        __init__(AAL::Matrix self, AAL::Matrix::CodingSystem aCodeWord, AAL::uint aColCount, AAL::uint aRowCount, vector< Polynom * > aNewMatrix) -> Matrix
        __init__(AAL::Matrix self, AAL::Matrix::CodingSystem aCodeWord, AAL::uint aColCount, AAL::uint aRowCount, vector< string > aNewMatrix) -> Matrix
        __init__(AAL::Matrix self, vector< Polynom * > aNewMatrix) -> Matrix
        __init__(AAL::Matrix self, vector< string > aNewMatrix) -> Matrix
        """
        this = _AAL.new_Matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_Matrix
    __del__ = lambda self : None;
    def setSize(self, *args):
        """setSize(Matrix self, AAL::uint aSize)"""
        return _AAL.Matrix_setSize(self, *args)

    def getSize(self):
        """getSize(Matrix self) -> AAL::uint"""
        return _AAL.Matrix_getSize(self)

    def setElemMatrix(self, *args):
        """setElemMatrix(Matrix self, AAL::uint i, Polynom newElem)"""
        return _AAL.Matrix_setElemMatrix(self, *args)

    def getElemMatrix(self, *args):
        """getElemMatrix(Matrix self, int i) -> Polynom"""
        return _AAL.Matrix_getElemMatrix(self, *args)

    def setCoding(self, *args):
        """setCoding(Matrix self, AAL::Matrix::CodingSystem aCodeWord)"""
        return _AAL.Matrix_setCoding(self, *args)

    def getCoding(self):
        """getCoding(Matrix self) -> AAL::Matrix::CodingSystem"""
        return _AAL.Matrix_getCoding(self)

    def getTrianType(self):
        """getTrianType(Matrix self) -> AAL::Matrix::TrianType"""
        return _AAL.Matrix_getTrianType(self)

    def setSizeMatrixBits(self, *args):
        """setSizeMatrixBits(Matrix self, AAL::uint nColCount, AAL::uint nRowCount)"""
        return _AAL.Matrix_setSizeMatrixBits(self, *args)

    def getSizeMatrixBits(self, *args):
        """getSizeMatrixBits(Matrix self, AAL::uint & nColCount, AAL::uint & nRowCount)"""
        return _AAL.Matrix_getSizeMatrixBits(self, *args)

    def getBit(self, *args):
        """getBit(Matrix self, AAL::uint nRowPosition, AAL::uint nColPosition) -> bool"""
        return _AAL.Matrix_getBit(self, *args)

    def setBit(self, *args):
        """
        setBit(Matrix self, AAL::uint nRowPosition, AAL::uint nColPosition, bool bValue=True)
        setBit(Matrix self, AAL::uint nRowPosition, AAL::uint nColPosition)
        """
        return _AAL.Matrix_setBit(self, *args)

    def getColCount(self):
        """getColCount(Matrix self) -> AAL::uint"""
        return _AAL.Matrix_getColCount(self)

    def getRowCount(self):
        """getRowCount(Matrix self) -> AAL::uint"""
        return _AAL.Matrix_getRowCount(self)

    def getSizeWordInBits(self):
        """getSizeWordInBits(Matrix self) -> AAL::uint"""
        return _AAL.Matrix_getSizeWordInBits(self)

    def isZero(self):
        """isZero(Matrix self) -> bool"""
        return _AAL.Matrix_isZero(self)

    def getColCountMatrixByte(self):
        """getColCountMatrixByte(Matrix self) -> AAL::uint"""
        return _AAL.Matrix_getColCountMatrixByte(self)

    def getRowCountMatrixByte(self):
        """getRowCountMatrixByte(Matrix self) -> AAL::uint"""
        return _AAL.Matrix_getRowCountMatrixByte(self)

    def i_to_str(self, *args):
        """i_to_str(Matrix self, AAL::uint x) -> std::string"""
        return _AAL.Matrix_i_to_str(self, *args)

    def ToStringLine(self):
        """ToStringLine(Matrix self) -> string"""
        return _AAL.Matrix_ToStringLine(self)

    def ToStringNotNullBits(self):
        """ToStringNotNullBits(Matrix self) -> string"""
        return _AAL.Matrix_ToStringNotNullBits(self)

    def conversionMatrix(self):
        """conversionMatrix(Matrix self) -> Matrix"""
        return _AAL.Matrix_conversionMatrix(self)

    def gausRightTrian(self):
        """gausRightTrian(Matrix self) -> Matrix"""
        return _AAL.Matrix_gausRightTrian(self)

    def gausLeftTrianBits(self):
        """gausLeftTrianBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_gausLeftTrianBits(self)

    def gausRightTrianBits(self):
        """gausRightTrianBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_gausRightTrianBits(self)

    def konovalcevRightTrian(self):
        """konovalcevRightTrian(Matrix self) -> Matrix"""
        return _AAL.Matrix_konovalcevRightTrian(self)

    def konovalcevLeftTrianBits(self):
        """konovalcevLeftTrianBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_konovalcevLeftTrianBits(self)

    def konovalcevRightTrianBits(self):
        """konovalcevRightTrianBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_konovalcevRightTrianBits(self)

    def nonsignMatrix(self):
        """nonsignMatrix(Matrix self) -> bool"""
        return _AAL.Matrix_nonsignMatrix(self)

    def gausRightDiag(self):
        """gausRightDiag(Matrix self) -> Matrix"""
        return _AAL.Matrix_gausRightDiag(self)

    def gausLeftDiagBits(self):
        """gausLeftDiagBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_gausLeftDiagBits(self)

    def gausRightDiagBits(self):
        """gausRightDiagBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_gausRightDiagBits(self)

    def diagWithoutNonsign(self):
        """diagWithoutNonsign(Matrix self) -> Matrix"""
        return _AAL.Matrix_diagWithoutNonsign(self)

    def reverseLeftBits(self):
        """reverseLeftBits(Matrix self) -> Matrix"""
        return _AAL.Matrix_reverseLeftBits(self)

    def reverseRight(self):
        """reverseRight(Matrix self) -> Matrix"""
        return _AAL.Matrix_reverseRight(self)

    def Transpose(self):
        """Transpose(Matrix self) -> Matrix"""
        return _AAL.Matrix_Transpose(self)

    def SolveLinearEquationSystem(self, *args):
        """SolveLinearEquationSystem(Matrix self, Matrix A, Polynom right) -> Polynom"""
        return _AAL.Matrix_SolveLinearEquationSystem(self, *args)

    def gausRightTrianForEquation(self, *args):
        """gausRightTrianForEquation(Matrix self, Polynom right) -> Matrix"""
        return _AAL.Matrix_gausRightTrianForEquation(self, *args)

    def gausRightDiagForEquation(self, *args):
        """gausRightDiagForEquation(Matrix self, Polynom right) -> Matrix"""
        return _AAL.Matrix_gausRightDiagForEquation(self, *args)

    def ToString(self, *args):
        """
        ToString(Matrix self) -> vector< string >
        ToString(Matrix self) -> std::string
        """
        return _AAL.Matrix_ToString(self, *args)

    def mul(self, *args):
        """mul(Matrix self, Matrix mtA, Matrix mtB) -> Matrix"""
        return _AAL.Matrix_mul(self, *args)

    def __repr__(self):
        """__repr__(Matrix self) -> char *"""
        return _AAL.Matrix___repr__(self)

Matrix_swigregister = _AAL.Matrix_swigregister
Matrix_swigregister(Matrix)
cvar = _AAL.cvar
P = cvar.P

BackHex = _AAL.BackHex
BackBin = _AAL.BackBin
class Polynom(ucharBasicType):
    """Proxy of C++ AAL::Polynom class"""
    __swig_setmethods__ = {}
    for _s in [ucharBasicType]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polynom, name, value)
    __swig_getmethods__ = {}
    for _s in [ucharBasicType]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polynom, name)
    def __init__(self, *args): 
        """
        __init__(AAL::Polynom self) -> Polynom
        __init__(AAL::Polynom self, Polynom polynom) -> Polynom
        __init__(AAL::Polynom self, std::string const dataString, AAL::PolynomSystem system=BackBin) -> Polynom
        __init__(AAL::Polynom self, std::string const dataString) -> Polynom
        __init__(AAL::Polynom self, std::string const dataString, bool in_degres, bool cancel=False) -> Polynom
        __init__(AAL::Polynom self, std::string const dataString, bool in_degres) -> Polynom
        """
        this = _AAL.new_Polynom(*args)
        try: self.this.append(this)
        except: self.this = this
    def Parse(self, *args):
        """
        Parse(Polynom self, std::string const dataString, AAL::PolynomSystem system=BackBin, bool cancel=False) -> Polynom
        Parse(Polynom self, std::string const dataString, AAL::PolynomSystem system=BackBin) -> Polynom
        Parse(Polynom self, std::string const dataString) -> Polynom
        """
        return _AAL.Polynom_Parse(self, *args)

    def ToString(self, *args):
        """
        ToString(Polynom self, std::string const dataString) -> std::string
        ToString(Polynom self, AAL::PolynomSystem system=BackBin) -> std::string
        ToString(Polynom self) -> std::string
        """
        return _AAL.Polynom_ToString(self, *args)

    def i_to_str(self, *args):
        """i_to_str(Polynom self, AAL::uint x) -> std::string"""
        return _AAL.Polynom_i_to_str(self, *args)

    def setOne(self):
        """setOne(Polynom self) -> Polynom"""
        return _AAL.Polynom_setOne(self)

    def setPolynom(self, *args):
        """setPolynom(Polynom self, AAL::uchar arg2) -> Polynom"""
        return _AAL.Polynom_setPolynom(self, *args)

    def setZero(self):
        """setZero(Polynom self) -> Polynom"""
        return _AAL.Polynom_setZero(self)

    def setUnit(self, *args):
        """setUnit(Polynom self, AAL::uint degree) -> Polynom"""
        return _AAL.Polynom_setUnit(self, *args)

    def getPowersOfPolynom(self):
        """getPowersOfPolynom(Polynom self) -> std::set< AAL::uint >"""
        return _AAL.Polynom_getPowersOfPolynom(self)

    def isPolynom(self, *args):
        """isPolynom(Polynom self, AAL::uchar polynom) -> bool"""
        return _AAL.Polynom_isPolynom(self, *args)

    def isNormal(self):
        """isNormal(Polynom self) -> bool"""
        return _AAL.Polynom_isNormal(self)

    def isIrreducible(self):
        """isIrreducible(Polynom self) -> bool"""
        return _AAL.Polynom_isIrreducible(self)

    def isPrimitivity(self):
        """isPrimitivity(Polynom self) -> bool"""
        return _AAL.Polynom_isPrimitivity(self)

    def __invert__(self):
        """__invert__(Polynom self) -> Polynom"""
        return _AAL.Polynom___invert__(self)

    def OnesComplement(self):
        """OnesComplement(Polynom self) -> Polynom"""
        return _AAL.Polynom_OnesComplement(self)

    def Compare(self, *args):
        """Compare(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom_Compare(self, *args)

    def __ixor__(self, *args):
        """__ixor__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___ixor__(self, *args)

    def Xor(self, *args):
        """Xor(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_Xor(self, *args)

    def __ior__(self, *args):
        """__ior__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___ior__(self, *args)

    def Or(self, *args):
        """Or(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_Or(self, *args)

    def __iand__(self, *args):
        """__iand__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___iand__(self, *args)

    def And(self, *args):
        """And(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_And(self, *args)

    def Not(self, *args):
        """Not(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom_Not(self, *args)

    def __lshift__(self, *args):
        """__lshift__(Polynom self, int numberBits) -> Polynom"""
        return _AAL.Polynom___lshift__(self, *args)

    def __ilshift__(self, *args):
        """__ilshift__(Polynom self, int numberBits) -> Polynom"""
        return _AAL.Polynom___ilshift__(self, *args)

    def __rshift__(self, *args):
        """__rshift__(Polynom self, int numberBits) -> Polynom"""
        return _AAL.Polynom___rshift__(self, *args)

    def __irshift__(self, *args):
        """__irshift__(Polynom self, int numberBits) -> Polynom"""
        return _AAL.Polynom___irshift__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___iadd__(self, *args)

    def Add(self, *args):
        """Add(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_Add(self, *args)

    def ModAdd(self, *args):
        """ModAdd(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom"""
        return _AAL.Polynom_ModAdd(self, *args)

    def AddInGF2_n(self, *args):
        """AddInGF2_n(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom"""
        return _AAL.Polynom_AddInGF2_n(self, *args)

    def __isub__(self, *args):
        """__isub__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___isub__(self, *args)

    def Sub(self, *args):
        """Sub(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_Sub(self, *args)

    def ModSub(self, *args):
        """ModSub(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom"""
        return _AAL.Polynom_ModSub(self, *args)

    def SubInGF2_n(self, *args):
        """SubInGF2_n(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom"""
        return _AAL.Polynom_SubInGF2_n(self, *args)

    def MulElemPolynoms(*args):
        """MulElemPolynoms(AAL::uchar u, AAL::uchar v) -> AAL::ushort"""
        return _AAL.Polynom_MulElemPolynoms(*args)

    if _newclass:MulElemPolynoms = staticmethod(MulElemPolynoms)
    __swig_getmethods__["MulElemPolynoms"] = lambda x: MulElemPolynoms
    def __imul__(self, *args):
        """__imul__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___imul__(self, *args)

    def Mul(self, *args):
        """Mul(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_Mul(self, *args)

    def ModMul(self, *args):
        """ModMul(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom"""
        return _AAL.Polynom_ModMul(self, *args)

    def MulGF2_n(self, *args):
        """MulGF2_n(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom"""
        return _AAL.Polynom_MulGF2_n(self, *args)

    def __idiv__(self, *args):
        """__idiv__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___idiv__(self, *args)

    def Div(self, *args):
        """
        Div(Polynom self, Polynom a, Polynom b, Polynom remainder=None) -> Polynom
        Div(Polynom self, Polynom a, Polynom b) -> Polynom
        """
        return _AAL.Polynom_Div(self, *args)

    def ModDiv(self, *args):
        """
        ModDiv(Polynom self, Polynom a, Polynom b, Polynom module, Polynom remainder=None) -> Polynom
        ModDiv(Polynom self, Polynom a, Polynom b, Polynom module) -> Polynom
        """
        return _AAL.Polynom_ModDiv(self, *args)

    def DivInGF2_n(self, *args):
        """DivInGF2_n(Polynom self, Polynom a, Polynom b, Polynom module, Polynom remainder) -> Polynom"""
        return _AAL.Polynom_DivInGF2_n(self, *args)

    def __imod__(self, *args):
        """__imod__(Polynom self, Polynom polynom) -> Polynom"""
        return _AAL.Polynom___imod__(self, *args)

    def Mod(self, *args):
        """
        Mod(Polynom self, Polynom a, Polynom b) -> Polynom
        Mod(Polynom self, Polynom module) -> Polynom
        """
        return _AAL.Polynom_Mod(self, *args)

    def FastMod(self, *args):
        """FastMod(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_FastMod(self, *args)

    def Pow(self, *args):
        """Pow(Polynom self, Polynom a, Integer n) -> Polynom"""
        return _AAL.Polynom_Pow(self, *args)

    def ModPow(self, *args):
        """ModPow(Polynom self, Polynom a, Integer n, Polynom module) -> Polynom"""
        return _AAL.Polynom_ModPow(self, *args)

    def PowGF2_n(self, *args):
        """PowGF2_n(Polynom self, Polynom a, Integer n, Polynom module) -> Polynom"""
        return _AAL.Polynom_PowGF2_n(self, *args)

    def Euclid(self, *args):
        """Euclid(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_Euclid(self, *args)

    def BinaryGCD(self, *args):
        """BinaryGCD(Polynom self, Polynom a, Polynom b) -> Polynom"""
        return _AAL.Polynom_BinaryGCD(self, *args)

    def ExEuclid(self, *args):
        """ExEuclid(Polynom self, Polynom a, Polynom b, Polynom x, Polynom y) -> Polynom"""
        return _AAL.Polynom_ExEuclid(self, *args)

    def Generate(self, *args):
        """
        Generate(Polynom self, AAL::uint numberBits) -> Polynom
        Generate(Polynom self, Polynom module) -> Polynom
        """
        return _AAL.Polynom_Generate(self, *args)

    def WrappingGenerate(self, *args):
        """WrappingGenerate(Polynom self, Polynom forwrap, Polynom module) -> Polynom"""
        return _AAL.Polynom_WrappingGenerate(self, *args)

    def GenerateIrreducible(self, *args):
        """GenerateIrreducible(Polynom self, AAL::uint nMinNumberBits, AAL::uint nMaxNumberBits, AAL::uint nDegree) -> Polynom"""
        return _AAL.Polynom_GenerateIrreducible(self, *args)

    def GenerateIrreduciblePrimitivity(self, *args):
        """GenerateIrreduciblePrimitivity(Polynom self, AAL::uint nMinNumberBits, AAL::uint nMaxNumberBits, AAL::uint nDegree) -> Polynom"""
        return _AAL.Polynom_GenerateIrreduciblePrimitivity(self, *args)

    def GenerateIrreducibleTrinomial(self, *args):
        """GenerateIrreducibleTrinomial(Polynom self, AAL::uint const nDegree) -> Polynom"""
        return _AAL.Polynom_GenerateIrreducibleTrinomial(self, *args)

    def GenerateNormal(self, *args):
        """
        GenerateNormal(Polynom self, AAL::uint numberBits) -> Polynom
        GenerateNormal(Polynom self, Polynom module) -> Polynom
        GenerateNormal(Polynom self, AAL::uint nMinNumberBits, AAL::uint nMaxNumberBits, AAL::uint nDegree) -> Polynom
        """
        return _AAL.Polynom_GenerateNormal(self, *args)

    def SchtilbergSuonTheorem(self, *args):
        """SchtilbergSuonTheorem(Polynom self, AAL::uint const k, AAL::uint const n) -> bool"""
        return _AAL.Polynom_SchtilbergSuonTheorem(self, *args)

    def ToStringByPowers(self):
        """ToStringByPowers(Polynom self) -> std::string"""
        return _AAL.Polynom_ToStringByPowers(self)

    def ONB1Test(self, *args):
        """ONB1Test(Polynom self, AAL::uint const n) -> bool"""
        return _AAL.Polynom_ONB1Test(self, *args)

    def ONB2Test(self, *args):
        """ONB2Test(Polynom self, AAL::uint const n) -> bool"""
        return _AAL.Polynom_ONB2Test(self, *args)

    def ONB3Test(self, *args):
        """ONB3Test(Polynom self, AAL::uint const n) -> bool"""
        return _AAL.Polynom_ONB3Test(self, *args)

    def GenerateONB1(self, *args):
        """GenerateONB1(Polynom self, AAL::uint const n, Polynom b, Matrix A) -> bool"""
        return _AAL.Polynom_GenerateONB1(self, *args)

    def GenerateONB2(self, *args):
        """GenerateONB2(Polynom self, AAL::uint const n, Polynom b, Matrix A) -> bool"""
        return _AAL.Polynom_GenerateONB2(self, *args)

    def GenerateONB3(self, *args):
        """GenerateONB3(Polynom self, AAL::uint const n, Polynom b, Matrix A) -> bool"""
        return _AAL.Polynom_GenerateONB3(self, *args)

    def GenerateONB1Polynom(self, *args):
        """GenerateONB1Polynom(Polynom self, AAL::uint const n, Polynom b) -> bool"""
        return _AAL.Polynom_GenerateONB1Polynom(self, *args)

    def GenerateONB2Polynom(self, *args):
        """GenerateONB2Polynom(Polynom self, AAL::uint const n, Polynom b) -> bool"""
        return _AAL.Polynom_GenerateONB2Polynom(self, *args)

    def GenerateONB3Polynom(self, *args):
        """GenerateONB3Polynom(Polynom self, AAL::uint const n, Polynom b) -> bool"""
        return _AAL.Polynom_GenerateONB3Polynom(self, *args)

    def GNBTest(self, *args):
        """GNBTest(Polynom self, AAL::uint const n, int const type) -> bool"""
        return _AAL.Polynom_GNBTest(self, *args)

    def InMulGroup(self, *args):
        """InMulGroup(Polynom self, Polynom groupModule) -> bool"""
        return _AAL.Polynom_InMulGroup(self, *args)

    def Inverse(self, *args):
        """
        Inverse(Polynom self, Polynom module) -> Polynom
        Inverse(Polynom self, Polynom polynom, Polynom module) -> Polynom
        """
        return _AAL.Polynom_Inverse(self, *args)

    def InverseGF2_n(self, *args):
        """InverseGF2_n(Polynom self, Polynom polynom, Polynom module) -> Polynom"""
        return _AAL.Polynom_InverseGF2_n(self, *args)

    def Trace(self, *args):
        """
        Trace(Polynom self, Polynom module) -> Polynom
        Trace(Polynom self, Polynom polynom, Polynom module) -> Polynom
        """
        return _AAL.Polynom_Trace(self, *args)

    def elementOrder(self, *args):
        """elementOrder(Polynom self, Polynom groupModule, Polynom polynom, DecompositionMemberVector vector, Integer ord) -> Integer"""
        return _AAL.Polynom_elementOrder(self, *args)

    def isGenerator(self, *args):
        """isGenerator(Polynom self, Polynom groupModule, Polynom polynom, DecompositionMemberVector vector, Integer ord) -> bool"""
        return _AAL.Polynom_isGenerator(self, *args)

    def __repr__(self):
        """__repr__(Polynom self) -> char *"""
        return _AAL.Polynom___repr__(self)

    __swig_destroy__ = _AAL.delete_Polynom
    __del__ = lambda self : None;
Polynom_swigregister = _AAL.Polynom_swigregister
Polynom_swigregister(Polynom)

def Polynom_MulElemPolynoms(*args):
  """Polynom_MulElemPolynoms(AAL::uchar u, AAL::uchar v) -> AAL::ushort"""
  return _AAL.Polynom_MulElemPolynoms(*args)

class PolynomGF3(_object):
    """Proxy of C++ AAL::PolynomGF3 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomGF3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomGF3, name)
    __swig_setmethods__["A0"] = _AAL.PolynomGF3_A0_set
    __swig_getmethods__["A0"] = _AAL.PolynomGF3_A0_get
    if _newclass:A0 = _swig_property(_AAL.PolynomGF3_A0_get, _AAL.PolynomGF3_A0_set)
    __swig_setmethods__["A1"] = _AAL.PolynomGF3_A1_set
    __swig_getmethods__["A1"] = _AAL.PolynomGF3_A1_get
    if _newclass:A1 = _swig_property(_AAL.PolynomGF3_A1_get, _AAL.PolynomGF3_A1_set)
    def __init__(self, *args): 
        """
        __init__(AAL::PolynomGF3 self) -> PolynomGF3
        __init__(AAL::PolynomGF3 self, PolynomGF3 polynom) -> PolynomGF3
        __init__(AAL::PolynomGF3 self, std::string const dataString) -> PolynomGF3
        """
        this = _AAL.new_PolynomGF3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_PolynomGF3
    __del__ = lambda self : None;
    def Parse(self, *args):
        """Parse(PolynomGF3 self, std::string const dataString) -> PolynomGF3"""
        return _AAL.PolynomGF3_Parse(self, *args)

    def i_to_str(self, *args):
        """i_to_str(PolynomGF3 self, AAL::uint x) -> std::string"""
        return _AAL.PolynomGF3_i_to_str(self, *args)

    def ToString(self):
        """ToString(PolynomGF3 self) -> std::string"""
        return _AAL.PolynomGF3_ToString(self)

    def isZero(self):
        """isZero(PolynomGF3 self) -> bool"""
        return _AAL.PolynomGF3_isZero(self)

    def isOne(self):
        """isOne(PolynomGF3 self) -> bool"""
        return _AAL.PolynomGF3_isOne(self)

    def isIrreducible(self):
        """isIrreducible(PolynomGF3 self) -> bool"""
        return _AAL.PolynomGF3_isIrreducible(self)

    def isPrimitivity(self):
        """isPrimitivity(PolynomGF3 self) -> bool"""
        return _AAL.PolynomGF3_isPrimitivity(self)

    def setTwo(self):
        """setTwo(PolynomGF3 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_setTwo(self)

    def setOne(self):
        """setOne(PolynomGF3 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_setOne(self)

    def setZero(self):
        """setZero(PolynomGF3 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_setZero(self)

    def getBit(self, *args):
        """getBit(PolynomGF3 self, AAL::uint index) -> AAL::uint"""
        return _AAL.PolynomGF3_getBit(self, *args)

    def setBit(self, *args):
        """setBit(PolynomGF3 self, AAL::uint index, AAL::uint bit)"""
        return _AAL.PolynomGF3_setBit(self, *args)

    def __lshift__(self, *args):
        """__lshift__(PolynomGF3 self, int numberBits) -> PolynomGF3"""
        return _AAL.PolynomGF3___lshift__(self, *args)

    def __ilshift__(self, *args):
        """__ilshift__(PolynomGF3 self, int numberBits) -> PolynomGF3"""
        return _AAL.PolynomGF3___ilshift__(self, *args)

    def __rshift__(self, *args):
        """__rshift__(PolynomGF3 self, int numberBits) -> PolynomGF3"""
        return _AAL.PolynomGF3___rshift__(self, *args)

    def __irshift__(self, *args):
        """__irshift__(PolynomGF3 self, int numberBits) -> PolynomGF3"""
        return _AAL.PolynomGF3___irshift__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PolynomGF3 self, PolynomGF3 polynom) -> PolynomGF3"""
        return _AAL.PolynomGF3___iadd__(self, *args)

    def Add(self, *args):
        """Add(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3"""
        return _AAL.PolynomGF3_Add(self, *args)

    def ModAdd(self, *args):
        """ModAdd(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_ModAdd(self, *args)

    def AddInGF3_n(self, *args):
        """AddInGF3_n(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_AddInGF3_n(self, *args)

    def __isub__(self, *args):
        """__isub__(PolynomGF3 self, PolynomGF3 polynom) -> PolynomGF3"""
        return _AAL.PolynomGF3___isub__(self, *args)

    def Sub(self, *args):
        """Sub(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3"""
        return _AAL.PolynomGF3_Sub(self, *args)

    def ModSub(self, *args):
        """ModSub(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_ModSub(self, *args)

    def __imul__(self, *args):
        """__imul__(PolynomGF3 self, PolynomGF3 polynom) -> PolynomGF3"""
        return _AAL.PolynomGF3___imul__(self, *args)

    def Mul(self, *args):
        """Mul(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3"""
        return _AAL.PolynomGF3_Mul(self, *args)

    def ModMul(self, *args):
        """ModMul(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_ModMul(self, *args)

    def MulGF3_n(self, *args):
        """MulGF3_n(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_MulGF3_n(self, *args)

    def __idiv__(self, *args):
        """__idiv__(PolynomGF3 self, PolynomGF3 polynom) -> PolynomGF3"""
        return _AAL.PolynomGF3___idiv__(self, *args)

    def Div(self, *args):
        """
        Div(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 remainder=None) -> PolynomGF3
        Div(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3
        """
        return _AAL.PolynomGF3_Div(self, *args)

    def __imod__(self, *args):
        """__imod__(PolynomGF3 self, PolynomGF3 polynom) -> PolynomGF3"""
        return _AAL.PolynomGF3___imod__(self, *args)

    def Mod(self, *args):
        """Mod(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3"""
        return _AAL.PolynomGF3_Mod(self, *args)

    def ModPositive(self, *args):
        """ModPositive(PolynomGF3 self, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_ModPositive(self, *args)

    def ModPow(self, *args):
        """ModPow(PolynomGF3 self, PolynomGF3 a, Integer n, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_ModPow(self, *args)

    def Pow(self, *args):
        """Pow(PolynomGF3 self, PolynomGF3 a, Integer n) -> PolynomGF3"""
        return _AAL.PolynomGF3_Pow(self, *args)

    def FastCube(self, *args):
        """FastCube(PolynomGF3 self, PolynomGF3 a1, int len) -> PolynomGF3"""
        return _AAL.PolynomGF3_FastCube(self, *args)

    def ModPow1(self, *args):
        """ModPow1(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_ModPow1(self, *args)

    def PowGF3_n(self, *args):
        """PowGF3_n(PolynomGF3 self, PolynomGF3 a, Integer n, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_PowGF3_n(self, *args)

    def Pow1(self, *args):
        """Pow1(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3"""
        return _AAL.PolynomGF3_Pow1(self, *args)

    def InverseMod1(self, *args):
        """InverseMod1(PolynomGF3 self, PolynomGF3 a, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_InverseMod1(self, *args)

    def InverseMod(self, *args):
        """InverseMod(PolynomGF3 self, PolynomGF3 a, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_InverseMod(self, *args)

    def getNumberBits(self):
        """getNumberBits(PolynomGF3 self) -> AAL::uint"""
        return _AAL.PolynomGF3_getNumberBits(self)

    def getFirstTrueBit(self):
        """getFirstTrueBit(PolynomGF3 self) -> AAL::uint"""
        return _AAL.PolynomGF3_getFirstTrueBit(self)

    def setNumberDigits(self, *args):
        """setNumberDigits(PolynomGF3 self, AAL::uint numberDigits)"""
        return _AAL.PolynomGF3_setNumberDigits(self, *args)

    def Generate(self, *args):
        """
        Generate(PolynomGF3 self, PolynomGF3 module) -> PolynomGF3
        Generate(PolynomGF3 self, PolynomGF3 module, PolynomGF3 m) -> PolynomGF3
        """
        return _AAL.PolynomGF3_Generate(self, *args)

    def GenerateIrreducible(self, *args):
        """GenerateIrreducible(PolynomGF3 self, AAL::uint const nDegree) -> PolynomGF3"""
        return _AAL.PolynomGF3_GenerateIrreducible(self, *args)

    def LegendreSymbol(self, *args):
        """LegendreSymbol(PolynomGF3 self, PolynomGF3 a, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_LegendreSymbol(self, *args)

    def Sqrt(self, *args):
        """Sqrt(PolynomGF3 self, PolynomGF3 a, PolynomGF3 module, Integer s, Integer T) -> PolynomGF3"""
        return _AAL.PolynomGF3_Sqrt(self, *args)

    def Square1(self, *args):
        """Square1(PolynomGF3 self, PolynomGF3 a, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.PolynomGF3_Square1(self, *args)

    def GCD(self, *args):
        """GCD(PolynomGF3 self, PolynomGF3 a, PolynomGF3 b) -> PolynomGF3"""
        return _AAL.PolynomGF3_GCD(self, *args)

    def getPowersOfPolynom(self):
        """getPowersOfPolynom(PolynomGF3 self) -> std::list< std::pair< AAL::uint,AAL::uint > >"""
        return _AAL.PolynomGF3_getPowersOfPolynom(self)

    def ToStringByPowers(self):
        """ToStringByPowers(PolynomGF3 self) -> std::string"""
        return _AAL.PolynomGF3_ToStringByPowers(self)

    def ONB1Test(self, *args):
        """ONB1Test(PolynomGF3 self, AAL::uint const n) -> bool"""
        return _AAL.PolynomGF3_ONB1Test(self, *args)

    def ONB2Test(self, *args):
        """ONB2Test(PolynomGF3 self, AAL::uint const n) -> bool"""
        return _AAL.PolynomGF3_ONB2Test(self, *args)

    def ONB3Test(self, *args):
        """ONB3Test(PolynomGF3 self, AAL::uint const n) -> bool"""
        return _AAL.PolynomGF3_ONB3Test(self, *args)

    def GNBTest(self, *args):
        """GNBTest(PolynomGF3 self, AAL::uint const n, int const type) -> bool"""
        return _AAL.PolynomGF3_GNBTest(self, *args)

    def elementOrder(self, *args):
        """elementOrder(PolynomGF3 self, PolynomGF3 groupModule, PolynomGF3 polynom, DecompositionMemberVector vector, Integer ord) -> Integer"""
        return _AAL.PolynomGF3_elementOrder(self, *args)

    def isGenerator(self, *args):
        """isGenerator(PolynomGF3 self, PolynomGF3 groupModule, PolynomGF3 polynom, DecompositionMemberVector vector, Integer ord) -> bool"""
        return _AAL.PolynomGF3_isGenerator(self, *args)

    def __repr__(self):
        """__repr__(PolynomGF3 self) -> char *"""
        return _AAL.PolynomGF3___repr__(self)

PolynomGF3_swigregister = _AAL.PolynomGF3_swigregister
PolynomGF3_swigregister(PolynomGF3)

class EllipticCurve(_object):
    """Proxy of C++ AAL::EllipticCurve class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticCurve, name)
    def __init__(self, *args): 
        """
        __init__(AAL::EllipticCurve self) -> EllipticCurve
        __init__(AAL::EllipticCurve self, Integer module, Integer J) -> EllipticCurve
        __init__(AAL::EllipticCurve self, Integer module, Integer a, Integer b) -> EllipticCurve
        __init__(AAL::EllipticCurve self, EllipticCurve eCurve) -> EllipticCurve
        """
        this = _AAL.new_EllipticCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_EllipticCurve
    __del__ = lambda self : None;
    def getModule(self):
        """getModule(EllipticCurve self) -> Integer"""
        return _AAL.EllipticCurve_getModule(self)

    def getInvariant(self):
        """getInvariant(EllipticCurve self) -> Integer"""
        return _AAL.EllipticCurve_getInvariant(self)

    def getA(self):
        """getA(EllipticCurve self) -> Integer"""
        return _AAL.EllipticCurve_getA(self)

    def getB(self):
        """getB(EllipticCurve self) -> Integer"""
        return _AAL.EllipticCurve_getB(self)

    def setModule(self, *args):
        """setModule(EllipticCurve self, Integer module) -> Integer"""
        return _AAL.EllipticCurve_setModule(self, *args)

    def setA(self, *args):
        """setA(EllipticCurve self, Integer a) -> Integer"""
        return _AAL.EllipticCurve_setA(self, *args)

    def setB(self, *args):
        """setB(EllipticCurve self, Integer b) -> Integer"""
        return _AAL.EllipticCurve_setB(self, *args)

    def getOrder(self):
        """getOrder(EllipticCurve self) -> Integer"""
        return _AAL.EllipticCurve_getOrder(self)

    def setCurve(self, *args):
        """
        setCurve(EllipticCurve self, Integer module, Integer J) -> EllipticCurve
        setCurve(EllipticCurve self, Integer module) -> EllipticCurve
        """
        return _AAL.EllipticCurve_setCurve(self, *args)

    def inGroup(self, *args):
        """inGroup(EllipticCurve self, Integer x, Integer y) -> bool"""
        return _AAL.EllipticCurve_inGroup(self, *args)

    def __repr__(self):
        """__repr__(EllipticCurve self) -> char *"""
        return _AAL.EllipticCurve___repr__(self)

EllipticCurve_swigregister = _AAL.EllipticCurve_swigregister
EllipticCurve_swigregister(EllipticCurve)

class EllipticPoint(_object):
    """Proxy of C++ AAL::EllipticPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticPoint, name)
    def __init__(self, *args): 
        """
        __init__(AAL::EllipticPoint self) -> EllipticPoint
        __init__(AAL::EllipticPoint self, EllipticCurve eCurve) -> EllipticPoint
        __init__(AAL::EllipticPoint self, EllipticPoint ePoint) -> EllipticPoint
        """
        this = _AAL.new_EllipticPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_EllipticPoint
    __del__ = lambda self : None;
    def getCurve(self):
        """getCurve(EllipticPoint self) -> EllipticCurve"""
        return _AAL.EllipticPoint_getCurve(self)

    def getX(self):
        """getX(EllipticPoint self) -> Integer"""
        return _AAL.EllipticPoint_getX(self)

    def getY(self):
        """getY(EllipticPoint self) -> Integer"""
        return _AAL.EllipticPoint_getY(self)

    def setCurve(self, *args):
        """setCurve(EllipticPoint self, EllipticCurve eCurve) -> EllipticCurve"""
        return _AAL.EllipticPoint_setCurve(self, *args)

    def setXY(self, *args):
        """setXY(EllipticPoint self, Integer x, Integer y) -> EllipticPoint"""
        return _AAL.EllipticPoint_setXY(self, *args)

    def isInfinite(self):
        """isInfinite(EllipticPoint self) -> bool"""
        return _AAL.EllipticPoint_isInfinite(self)

    def setInfinite(self, *args):
        """setInfinite(EllipticPoint self, bool infinite) -> EllipticPoint"""
        return _AAL.EllipticPoint_setInfinite(self, *args)

    def Negate(self, *args):
        """
        Negate(EllipticPoint self) -> EllipticPoint
        Negate(EllipticPoint self, EllipticPoint ePoint) -> EllipticPoint
        """
        return _AAL.EllipticPoint_Negate(self, *args)

    def __iadd__(self, *args):
        """__iadd__(EllipticPoint self, EllipticPoint ePoint1) -> EllipticPoint"""
        return _AAL.EllipticPoint___iadd__(self, *args)

    def Add(self, *args):
        """Add(EllipticPoint self, EllipticPoint ePoint1, EllipticPoint ePoint2) -> EllipticPoint"""
        return _AAL.EllipticPoint_Add(self, *args)

    def Double(self, *args):
        """
        Double(EllipticPoint self) -> EllipticPoint
        Double(EllipticPoint self, EllipticPoint e) -> EllipticPoint
        """
        return _AAL.EllipticPoint_Double(self, *args)

    def __imul__(self, *args):
        """__imul__(EllipticPoint self, Integer i) -> EllipticPoint"""
        return _AAL.EllipticPoint___imul__(self, *args)

    def Mul(self, *args):
        """
        Mul(EllipticPoint self, Integer i, EllipticPoint ePoint) -> EllipticPoint
        Mul(EllipticPoint self, EllipticPoint ePoint, Integer i) -> EllipticPoint
        """
        return _AAL.EllipticPoint_Mul(self, *args)

    def Generate(self):
        """Generate(EllipticPoint self) -> EllipticPoint"""
        return _AAL.EllipticPoint_Generate(self)

    def __repr__(self):
        """__repr__(EllipticPoint self) -> char *"""
        return _AAL.EllipticPoint___repr__(self)

EllipticPoint_swigregister = _AAL.EllipticPoint_swigregister
EllipticPoint_swigregister(EllipticPoint)

class IntegerBinomModulePolynom(_object):
    """Proxy of C++ AAL::IntegerBinomModulePolynom class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerBinomModulePolynom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerBinomModulePolynom, name)
    def __init__(self, *args): 
        """
        __init__(AAL::IntegerBinomModulePolynom self) -> IntegerBinomModulePolynom
        __init__(AAL::IntegerBinomModulePolynom self, IntegerBinomModulePolynom polynom) -> IntegerBinomModulePolynom
        __init__(AAL::IntegerBinomModulePolynom self, Integer a0, Integer a1, Integer module) -> IntegerBinomModulePolynom
        """
        this = _AAL.new_IntegerBinomModulePolynom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_IntegerBinomModulePolynom
    __del__ = lambda self : None;
    def ToString(self):
        """ToString(IntegerBinomModulePolynom self) -> std::string"""
        return _AAL.IntegerBinomModulePolynom_ToString(self)

    def getA0(self):
        """getA0(IntegerBinomModulePolynom self) -> Integer"""
        return _AAL.IntegerBinomModulePolynom_getA0(self)

    def getA1(self):
        """getA1(IntegerBinomModulePolynom self) -> Integer"""
        return _AAL.IntegerBinomModulePolynom_getA1(self)

    def setA0A1(self, *args):
        """setA0A1(IntegerBinomModulePolynom self, Integer a0, Integer a1)"""
        return _AAL.IntegerBinomModulePolynom_setA0A1(self, *args)

    def getModule(self):
        """getModule(IntegerBinomModulePolynom self) -> Integer"""
        return _AAL.IntegerBinomModulePolynom_getModule(self)

    def setModule(self, *args):
        """setModule(IntegerBinomModulePolynom self, Integer module)"""
        return _AAL.IntegerBinomModulePolynom_setModule(self, *args)

    def __repr__(self):
        """__repr__(IntegerBinomModulePolynom self) -> char *"""
        return _AAL.IntegerBinomModulePolynom___repr__(self)

IntegerBinomModulePolynom_swigregister = _AAL.IntegerBinomModulePolynom_swigregister
IntegerBinomModulePolynom_swigregister(IntegerBinomModulePolynom)

class IntegerBinom(_object):
    """Proxy of C++ AAL::IntegerBinom class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerBinom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerBinom, name)
    def __init__(self, *args): 
        """
        __init__(AAL::IntegerBinom self) -> IntegerBinom
        __init__(AAL::IntegerBinom self, IntegerBinom binom) -> IntegerBinom
        __init__(AAL::IntegerBinom self, Integer a, Integer b, IntegerBinomModulePolynom modulePolynom) -> IntegerBinom
        """
        this = _AAL.new_IntegerBinom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_IntegerBinom
    __del__ = lambda self : None;
    def ToString(self):
        """ToString(IntegerBinom self) -> std::string"""
        return _AAL.IntegerBinom_ToString(self)

    def isGenerative(self, *args):
        """isGenerative(IntegerBinom self, DecompositionMemberVector mulGroupOrdDecomposition) -> bool"""
        return _AAL.IntegerBinom_isGenerative(self, *args)

    def isZero(self):
        """isZero(IntegerBinom self) -> bool"""
        return _AAL.IntegerBinom_isZero(self)

    def isOne(self):
        """isOne(IntegerBinom self) -> bool"""
        return _AAL.IntegerBinom_isOne(self)

    def setZero(self):
        """setZero(IntegerBinom self)"""
        return _AAL.IntegerBinom_setZero(self)

    def setOne(self):
        """setOne(IntegerBinom self)"""
        return _AAL.IntegerBinom_setOne(self)

    def getA(self):
        """getA(IntegerBinom self) -> Integer"""
        return _AAL.IntegerBinom_getA(self)

    def setA(self, *args):
        """setA(IntegerBinom self, Integer a)"""
        return _AAL.IntegerBinom_setA(self, *args)

    def getB(self):
        """getB(IntegerBinom self) -> Integer"""
        return _AAL.IntegerBinom_getB(self)

    def setB(self, *args):
        """setB(IntegerBinom self, Integer b)"""
        return _AAL.IntegerBinom_setB(self, *args)

    def getModulePolynom(self):
        """getModulePolynom(IntegerBinom self) -> IntegerBinomModulePolynom"""
        return _AAL.IntegerBinom_getModulePolynom(self)

    def setModulePolynom(self, *args):
        """setModulePolynom(IntegerBinom self, IntegerBinomModulePolynom modulePolynom)"""
        return _AAL.IntegerBinom_setModulePolynom(self, *args)

    def getModule(self):
        """getModule(IntegerBinom self) -> Integer"""
        return _AAL.IntegerBinom_getModule(self)

    def getMulGroupOrder(self):
        """getMulGroupOrder(IntegerBinom self) -> Integer"""
        return _AAL.IntegerBinom_getMulGroupOrder(self)

    def __iadd__(self, *args):
        """__iadd__(IntegerBinom self, IntegerBinom binom) -> IntegerBinom"""
        return _AAL.IntegerBinom___iadd__(self, *args)

    def Add(self, *args):
        """Add(IntegerBinom self, IntegerBinom a, IntegerBinom b) -> IntegerBinom"""
        return _AAL.IntegerBinom_Add(self, *args)

    def __isub__(self, *args):
        """__isub__(IntegerBinom self, IntegerBinom binom) -> IntegerBinom"""
        return _AAL.IntegerBinom___isub__(self, *args)

    def Sub(self, *args):
        """Sub(IntegerBinom self, IntegerBinom a, IntegerBinom b) -> IntegerBinom"""
        return _AAL.IntegerBinom_Sub(self, *args)

    def Negate(self, *args):
        """
        Negate(IntegerBinom self) -> IntegerBinom
        Negate(IntegerBinom self, IntegerBinom binom) -> IntegerBinom
        """
        return _AAL.IntegerBinom_Negate(self, *args)

    def __imul__(self, *args):
        """__imul__(IntegerBinom self, IntegerBinom binom) -> IntegerBinom"""
        return _AAL.IntegerBinom___imul__(self, *args)

    def Mul(self, *args):
        """Mul(IntegerBinom self, IntegerBinom a, IntegerBinom b) -> IntegerBinom"""
        return _AAL.IntegerBinom_Mul(self, *args)

    def Pow(self, *args):
        """Pow(IntegerBinom self, IntegerBinom a, Integer n) -> IntegerBinom"""
        return _AAL.IntegerBinom_Pow(self, *args)

    def Inverse(self, *args):
        """
        Inverse(IntegerBinom self) -> IntegerBinom
        Inverse(IntegerBinom self, IntegerBinom a) -> IntegerBinom
        """
        return _AAL.IntegerBinom_Inverse(self, *args)

    def Generate(self):
        """Generate(IntegerBinom self) -> IntegerBinom"""
        return _AAL.IntegerBinom_Generate(self)

    def GenerateGenerative(self, *args):
        """GenerateGenerative(IntegerBinom self, DecompositionMemberVector mulGroupOrdDecomposition) -> IntegerBinom"""
        return _AAL.IntegerBinom_GenerateGenerative(self, *args)

    def GenerateOneRootGroup(self, *args):
        """GenerateOneRootGroup(IntegerBinom self, Integer rootDegree, DecompositionMemberVector mulGroupOrdDecomposition) -> IntegerBinomVector"""
        return _AAL.IntegerBinom_GenerateOneRootGroup(self, *args)

    def GenerateSubGroup(self, *args):
        """GenerateSubGroup(IntegerBinom self, Integer subGroupOrder, DecompositionMemberVector mulGroupOrdDecomposition) -> IntegerBinomVector"""
        return _AAL.IntegerBinom_GenerateSubGroup(self, *args)

    def MulMultitude(self, *args):
        """MulMultitude(IntegerBinom self, IntegerBinomVector multitude, IntegerBinom binom) -> IntegerBinomVector"""
        return _AAL.IntegerBinom_MulMultitude(self, *args)

    def MultitudeToString(*args):
        """MultitudeToString(IntegerBinomVector multitude) -> std::string"""
        return _AAL.IntegerBinom_MultitudeToString(*args)

    if _newclass:MultitudeToString = staticmethod(MultitudeToString)
    __swig_getmethods__["MultitudeToString"] = lambda x: MultitudeToString
    def FactorToString(*args):
        """FactorToString(IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string"""
        return _AAL.IntegerBinom_FactorToString(*args)

    if _newclass:FactorToString = staticmethod(FactorToString)
    __swig_getmethods__["FactorToString"] = lambda x: FactorToString
    def FactorToTexString(self, *args):
        """
        FactorToTexString(IntegerBinom self, IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string
        FactorToTexString(IntegerBinom self, Integer rootDegree, DecompositionMemberVector mulGroupOrdDecomposition) -> std::string
        """
        return _AAL.IntegerBinom_FactorToTexString(self, *args)

    def __repr__(self):
        """__repr__(IntegerBinom self) -> char *"""
        return _AAL.IntegerBinom___repr__(self)

IntegerBinom_swigregister = _AAL.IntegerBinom_swigregister
IntegerBinom_swigregister(IntegerBinom)

def IntegerBinom_MultitudeToString(*args):
  """IntegerBinom_MultitudeToString(IntegerBinomVector multitude) -> std::string"""
  return _AAL.IntegerBinom_MultitudeToString(*args)

def IntegerBinom_FactorToString(*args):
  """IntegerBinom_FactorToString(IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string"""
  return _AAL.IntegerBinom_FactorToString(*args)

class IntegerBinomEllipticCurve(_object):
    """Proxy of C++ AAL::IntegerBinomEllipticCurve class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerBinomEllipticCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerBinomEllipticCurve, name)
    def __init__(self, *args): 
        """
        __init__(AAL::IntegerBinomEllipticCurve self) -> IntegerBinomEllipticCurve
        __init__(AAL::IntegerBinomEllipticCurve self, IntegerBinom a, IntegerBinom b) -> IntegerBinomEllipticCurve
        __init__(AAL::IntegerBinomEllipticCurve self, IntegerBinomEllipticCurve curve) -> IntegerBinomEllipticCurve
        """
        this = _AAL.new_IntegerBinomEllipticCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_IntegerBinomEllipticCurve
    __del__ = lambda self : None;
    def getModule(self):
        """getModule(IntegerBinomEllipticCurve self) -> Integer"""
        return _AAL.IntegerBinomEllipticCurve_getModule(self)

    def getModulePolynom(self):
        """getModulePolynom(IntegerBinomEllipticCurve self) -> IntegerBinomModulePolynom"""
        return _AAL.IntegerBinomEllipticCurve_getModulePolynom(self)

    def getA(self):
        """getA(IntegerBinomEllipticCurve self) -> IntegerBinom"""
        return _AAL.IntegerBinomEllipticCurve_getA(self)

    def getB(self):
        """getB(IntegerBinomEllipticCurve self) -> IntegerBinom"""
        return _AAL.IntegerBinomEllipticCurve_getB(self)

    def inGroup(self, *args):
        """inGroup(IntegerBinomEllipticCurve self, IntegerBinom x, IntegerBinom y) -> bool"""
        return _AAL.IntegerBinomEllipticCurve_inGroup(self, *args)

    def CreateGroup(self):
        """CreateGroup(IntegerBinomEllipticCurve self) -> IntegerBinomEllipticPointVector"""
        return _AAL.IntegerBinomEllipticCurve_CreateGroup(self)

    def CreateSpinningGroup(self, *args):
        """CreateSpinningGroup(IntegerBinomEllipticCurve self, Integer n) -> IntegerBinomEllipticPointVector"""
        return _AAL.IntegerBinomEllipticCurve_CreateSpinningGroup(self, *args)

    def CreateMultipliedGroup(self, *args):
        """CreateMultipliedGroup(IntegerBinomEllipticCurve self, Integer n) -> IntegerBinomEllipticPointVector"""
        return _AAL.IntegerBinomEllipticCurve_CreateMultipliedGroup(self, *args)

    def CreateFactorGroup(self, *args):
        """CreateFactorGroup(IntegerBinomEllipticCurve self, Integer n) -> std::vector< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > >,std::allocator< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > > > >"""
        return _AAL.IntegerBinomEllipticCurve_CreateFactorGroup(self, *args)

    def MultitudeToTexString(*args):
        """MultitudeToTexString(IntegerBinomEllipticPointVector multitude) -> std::string"""
        return _AAL.IntegerBinomEllipticCurve_MultitudeToTexString(*args)

    if _newclass:MultitudeToTexString = staticmethod(MultitudeToTexString)
    __swig_getmethods__["MultitudeToTexString"] = lambda x: MultitudeToTexString
    def FactorToTexString(*args):
        """FactorToTexString(std::vector< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > >,std::allocator< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > > > > & factor) -> std::string"""
        return _AAL.IntegerBinomEllipticCurve_FactorToTexString(*args)

    if _newclass:FactorToTexString = staticmethod(FactorToTexString)
    __swig_getmethods__["FactorToTexString"] = lambda x: FactorToTexString
    def __repr__(self):
        """__repr__(IntegerBinomEllipticCurve self) -> char *"""
        return _AAL.IntegerBinomEllipticCurve___repr__(self)

IntegerBinomEllipticCurve_swigregister = _AAL.IntegerBinomEllipticCurve_swigregister
IntegerBinomEllipticCurve_swigregister(IntegerBinomEllipticCurve)

def IntegerBinomEllipticCurve_MultitudeToTexString(*args):
  """IntegerBinomEllipticCurve_MultitudeToTexString(IntegerBinomEllipticPointVector multitude) -> std::string"""
  return _AAL.IntegerBinomEllipticCurve_MultitudeToTexString(*args)

def IntegerBinomEllipticCurve_FactorToTexString(*args):
  """IntegerBinomEllipticCurve_FactorToTexString(std::vector< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > >,std::allocator< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > > > > & factor) -> std::string"""
  return _AAL.IntegerBinomEllipticCurve_FactorToTexString(*args)

class IntegerBinomEllipticPoint(_object):
    """Proxy of C++ AAL::IntegerBinomEllipticPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerBinomEllipticPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerBinomEllipticPoint, name)
    def __init__(self, *args): 
        """
        __init__(AAL::IntegerBinomEllipticPoint self) -> IntegerBinomEllipticPoint
        __init__(AAL::IntegerBinomEllipticPoint self, IntegerBinomEllipticCurve eCurve) -> IntegerBinomEllipticPoint
        __init__(AAL::IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint ePoint) -> IntegerBinomEllipticPoint
        """
        this = _AAL.new_IntegerBinomEllipticPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_IntegerBinomEllipticPoint
    __del__ = lambda self : None;
    def getCurve(self):
        """getCurve(IntegerBinomEllipticPoint self) -> IntegerBinomEllipticCurve"""
        return _AAL.IntegerBinomEllipticPoint_getCurve(self)

    def getX(self):
        """getX(IntegerBinomEllipticPoint self) -> IntegerBinom"""
        return _AAL.IntegerBinomEllipticPoint_getX(self)

    def getY(self):
        """getY(IntegerBinomEllipticPoint self) -> IntegerBinom"""
        return _AAL.IntegerBinomEllipticPoint_getY(self)

    def setCurve(self, *args):
        """setCurve(IntegerBinomEllipticPoint self, IntegerBinomEllipticCurve eCurve) -> IntegerBinomEllipticCurve"""
        return _AAL.IntegerBinomEllipticPoint_setCurve(self, *args)

    def setXY(self, *args):
        """setXY(IntegerBinomEllipticPoint self, IntegerBinom x, IntegerBinom y) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPoint_setXY(self, *args)

    def isInfinite(self):
        """isInfinite(IntegerBinomEllipticPoint self) -> bool"""
        return _AAL.IntegerBinomEllipticPoint_isInfinite(self)

    def setInfinite(self, *args):
        """setInfinite(IntegerBinomEllipticPoint self, bool infinite) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPoint_setInfinite(self, *args)

    def isSelfnegative(self):
        """isSelfnegative(IntegerBinomEllipticPoint self) -> bool"""
        return _AAL.IntegerBinomEllipticPoint_isSelfnegative(self)

    def Negate(self, *args):
        """
        Negate(IntegerBinomEllipticPoint self) -> IntegerBinomEllipticPoint
        Negate(IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint ePoint) -> IntegerBinomEllipticPoint
        """
        return _AAL.IntegerBinomEllipticPoint_Negate(self, *args)

    def __iadd__(self, *args):
        """__iadd__(IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint ePoint) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPoint___iadd__(self, *args)

    def Add(self, *args):
        """Add(IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint ePoint1, IntegerBinomEllipticPoint ePoint2) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPoint_Add(self, *args)

    def Double(self, *args):
        """
        Double(IntegerBinomEllipticPoint self) -> IntegerBinomEllipticPoint
        Double(IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint e) -> IntegerBinomEllipticPoint
        """
        return _AAL.IntegerBinomEllipticPoint_Double(self, *args)

    def Mul(self, *args):
        """Mul(IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint ePoint, Integer i) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPoint_Mul(self, *args)

    def Order(self):
        """Order(IntegerBinomEllipticPoint self) -> Integer"""
        return _AAL.IntegerBinomEllipticPoint_Order(self)

    def Distortion(self, *args):
        """
        Distortion(IntegerBinomEllipticPoint self) -> IntegerBinomEllipticPoint
        Distortion(IntegerBinomEllipticPoint self, IntegerBinomEllipticPoint point) -> IntegerBinomEllipticPoint
        """
        return _AAL.IntegerBinomEllipticPoint_Distortion(self, *args)

    def Generate(self):
        """Generate(IntegerBinomEllipticPoint self) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPoint_Generate(self)

    def ToString(self):
        """ToString(IntegerBinomEllipticPoint self) -> std::string"""
        return _AAL.IntegerBinomEllipticPoint_ToString(self)

    def ToTexString(self):
        """ToTexString(IntegerBinomEllipticPoint self) -> std::string"""
        return _AAL.IntegerBinomEllipticPoint_ToTexString(self)

    def __repr__(self):
        """__repr__(IntegerBinomEllipticPoint self) -> char *"""
        return _AAL.IntegerBinomEllipticPoint___repr__(self)

IntegerBinomEllipticPoint_swigregister = _AAL.IntegerBinomEllipticPoint_swigregister
IntegerBinomEllipticPoint_swigregister(IntegerBinomEllipticPoint)

class Converter(_object):
    """Proxy of C++ AAL::Converter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Converter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Converter, name)
    __repr__ = _swig_repr
    def ToInteger(*args):
        """
        ToInteger(std::string const & dataString, AAL::NumericSystem system=Dec) -> Integer
        ToInteger(std::string const & dataString) -> Integer
        ToInteger(Polynom polynom) -> Integer
        ToInteger(PolynomGF3 polynom) -> Integer
        ToInteger(std::string & polynom) -> Integer
        """
        return _AAL.Converter_ToInteger(*args)

    if _newclass:ToInteger = staticmethod(ToInteger)
    __swig_getmethods__["ToInteger"] = lambda x: ToInteger
    def ToPolynom(*args):
        """
        ToPolynom(std::string const & dataString, AAL::PolynomSystem system=BackBin) -> Polynom
        ToPolynom(std::string const & dataString) -> Polynom
        ToPolynom(Integer integer) -> Polynom
        """
        return _AAL.Converter_ToPolynom(*args)

    if _newclass:ToPolynom = staticmethod(ToPolynom)
    __swig_getmethods__["ToPolynom"] = lambda x: ToPolynom
    def ToPolynomGF3(*args):
        """ToPolynomGF3(Integer integer) -> PolynomGF3"""
        return _AAL.Converter_ToPolynomGF3(*args)

    if _newclass:ToPolynomGF3 = staticmethod(ToPolynomGF3)
    __swig_getmethods__["ToPolynomGF3"] = lambda x: ToPolynomGF3
    def ToString(*args):
        """
        ToString(Integer integer, AAL::NumericSystem system=Dec) -> std::string
        ToString(Integer integer) -> std::string
        ToString(Polynom polynom, AAL::PolynomSystem system=BackBin) -> std::string
        ToString(Polynom polynom) -> std::string
        """
        return _AAL.Converter_ToString(*args)

    if _newclass:ToString = staticmethod(ToString)
    __swig_getmethods__["ToString"] = lambda x: ToString
    def FactorToString(*args):
        """FactorToString(IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string"""
        return _AAL.Converter_FactorToString(*args)

    if _newclass:FactorToString = staticmethod(FactorToString)
    __swig_getmethods__["FactorToString"] = lambda x: FactorToString
    def MultitudeToString(*args):
        """MultitudeToString(IntegerBinomVector multitude) -> std::string"""
        return _AAL.Converter_MultitudeToString(*args)

    if _newclass:MultitudeToString = staticmethod(MultitudeToString)
    __swig_getmethods__["MultitudeToString"] = lambda x: MultitudeToString
    def MultitudeToTexString(*args):
        """MultitudeToTexString(IntegerBinomEllipticPointVector multitude) -> std::string"""
        return _AAL.Converter_MultitudeToTexString(*args)

    if _newclass:MultitudeToTexString = staticmethod(MultitudeToTexString)
    __swig_getmethods__["MultitudeToTexString"] = lambda x: MultitudeToTexString
    def FactorToTexString(*args):
        """
        FactorToTexString(IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string
        FactorToTexString(std::vector< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > >,std::allocator< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > > > > & factor) -> std::string
        """
        return _AAL.Converter_FactorToTexString(*args)

    if _newclass:FactorToTexString = staticmethod(FactorToTexString)
    __swig_getmethods__["FactorToTexString"] = lambda x: FactorToTexString
    def __init__(self): 
        """__init__(AAL::Converter self) -> Converter"""
        this = _AAL.new_Converter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_Converter
    __del__ = lambda self : None;
Converter_swigregister = _AAL.Converter_swigregister
Converter_swigregister(Converter)

def Converter_ToInteger(*args):
  """
    ToInteger(std::string const & dataString, AAL::NumericSystem system=Dec) -> Integer
    ToInteger(std::string const & dataString) -> Integer
    ToInteger(Polynom polynom) -> Integer
    ToInteger(PolynomGF3 polynom) -> Integer
    Converter_ToInteger(std::string & polynom) -> Integer
    """
  return _AAL.Converter_ToInteger(*args)

def Converter_ToPolynom(*args):
  """
    ToPolynom(std::string const & dataString, AAL::PolynomSystem system=BackBin) -> Polynom
    ToPolynom(std::string const & dataString) -> Polynom
    Converter_ToPolynom(Integer integer) -> Polynom
    """
  return _AAL.Converter_ToPolynom(*args)

def Converter_ToPolynomGF3(*args):
  """Converter_ToPolynomGF3(Integer integer) -> PolynomGF3"""
  return _AAL.Converter_ToPolynomGF3(*args)

def Converter_ToString(*args):
  """
    ToString(Integer integer, AAL::NumericSystem system=Dec) -> std::string
    ToString(Integer integer) -> std::string
    ToString(Polynom polynom, AAL::PolynomSystem system=BackBin) -> std::string
    Converter_ToString(Polynom polynom) -> std::string
    """
  return _AAL.Converter_ToString(*args)

def Converter_FactorToString(*args):
  """Converter_FactorToString(IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string"""
  return _AAL.Converter_FactorToString(*args)

def Converter_MultitudeToString(*args):
  """Converter_MultitudeToString(IntegerBinomVector multitude) -> std::string"""
  return _AAL.Converter_MultitudeToString(*args)

def Converter_MultitudeToTexString(*args):
  """Converter_MultitudeToTexString(IntegerBinomEllipticPointVector multitude) -> std::string"""
  return _AAL.Converter_MultitudeToTexString(*args)

def Converter_FactorToTexString(*args):
  """
    FactorToTexString(IntegerBinomVector factor, std::vector< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >,std::allocator< std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > > > > & subGroups) -> std::string
    Converter_FactorToTexString(std::vector< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > >,std::allocator< std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > > > > & factor) -> std::string
    """
  return _AAL.Converter_FactorToTexString(*args)

class TableManager(_object):
    """Proxy of C++ AAL::TableManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    def Instance():
        """Instance() -> TableManager"""
        return _AAL.TableManager_Instance()

    if _newclass:Instance = staticmethod(Instance)
    __swig_getmethods__["Instance"] = lambda x: Instance
    def getElementaryPolynomsMultiplication(self, *args):
        """getElementaryPolynomsMultiplication(TableManager self, AAL::uchar u, AAL::uchar v) -> AAL::ushort"""
        return _AAL.TableManager_getElementaryPolynomsMultiplication(self, *args)

    def __repr__(self):
        """__repr__(TableManager self) -> char *"""
        return _AAL.TableManager___repr__(self)

    __swig_destroy__ = _AAL.delete_TableManager
    __del__ = lambda self : None;
TableManager_swigregister = _AAL.TableManager_swigregister
TableManager_swigregister(TableManager)

def TableManager_Instance():
  """TableManager_Instance() -> TableManager"""
  return _AAL.TableManager_Instance()

class EllipticCurveGF2(_object):
    """Proxy of C++ AAL::EllipticCurveGF2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticCurveGF2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticCurveGF2, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AAL.delete_EllipticCurveGF2
    __del__ = lambda self : None;
    def getModule(self):
        """getModule(EllipticCurveGF2 self) -> Polynom"""
        return _AAL.EllipticCurveGF2_getModule(self)

    def setModule(self, *args):
        """setModule(EllipticCurveGF2 self, Polynom module) -> Polynom"""
        return _AAL.EllipticCurveGF2_setModule(self, *args)

    def isSuperSingular(self):
        """isSuperSingular(EllipticCurveGF2 self) -> bool"""
        return _AAL.EllipticCurveGF2_isSuperSingular(self)

    def isNonSuperSingular(self):
        """isNonSuperSingular(EllipticCurveGF2 self) -> bool"""
        return _AAL.EllipticCurveGF2_isNonSuperSingular(self)

    def equals(self, *args):
        """equals(EllipticCurveGF2 self, EllipticCurveGF2 eCurve) -> bool"""
        return _AAL.EllipticCurveGF2_equals(self, *args)

    def inGroup(self, *args):
        """inGroup(EllipticCurveGF2 self, Polynom x, Polynom y) -> bool"""
        return _AAL.EllipticCurveGF2_inGroup(self, *args)

    def rightSide(self, *args):
        """rightSide(EllipticCurveGF2 self, Polynom x) -> Polynom"""
        return _AAL.EllipticCurveGF2_rightSide(self, *args)

    def hasY(self, *args):
        """hasY(EllipticCurveGF2 self, Polynom x) -> bool"""
        return _AAL.EllipticCurveGF2_hasY(self, *args)

EllipticCurveGF2_swigregister = _AAL.EllipticCurveGF2_swigregister
EllipticCurveGF2_swigregister(EllipticCurveGF2)

class SuperSingularEllipticCurve(EllipticCurveGF2):
    """Proxy of C++ AAL::SuperSingularEllipticCurve class"""
    __swig_setmethods__ = {}
    for _s in [EllipticCurveGF2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SuperSingularEllipticCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticCurveGF2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SuperSingularEllipticCurve, name)
    def __init__(self, *args): 
        """
        __init__(AAL::SuperSingularEllipticCurve self) -> SuperSingularEllipticCurve
        __init__(AAL::SuperSingularEllipticCurve self, Polynom module, Polynom a3, Polynom a4, Polynom a6) -> SuperSingularEllipticCurve
        __init__(AAL::SuperSingularEllipticCurve self, SuperSingularEllipticCurve eCurve) -> SuperSingularEllipticCurve
        """
        this = _AAL.new_SuperSingularEllipticCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_SuperSingularEllipticCurve
    __del__ = lambda self : None;
    def setModule(self, *args):
        """setModule(SuperSingularEllipticCurve self, Polynom module) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_setModule(self, *args)

    def getA3(self):
        """getA3(SuperSingularEllipticCurve self) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_getA3(self)

    def getA4(self):
        """getA4(SuperSingularEllipticCurve self) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_getA4(self)

    def getA6(self):
        """getA6(SuperSingularEllipticCurve self) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_getA6(self)

    def setA3(self, *args):
        """setA3(SuperSingularEllipticCurve self, Polynom a3) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_setA3(self, *args)

    def setA4(self, *args):
        """setA4(SuperSingularEllipticCurve self, Polynom a4) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_setA4(self, *args)

    def setA6(self, *args):
        """setA6(SuperSingularEllipticCurve self, Polynom a6) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_setA6(self, *args)

    def isSuperSingular(self):
        """isSuperSingular(SuperSingularEllipticCurve self) -> bool"""
        return _AAL.SuperSingularEllipticCurve_isSuperSingular(self)

    def isNonSuperSingular(self):
        """isNonSuperSingular(SuperSingularEllipticCurve self) -> bool"""
        return _AAL.SuperSingularEllipticCurve_isNonSuperSingular(self)

    def getOrd(self, *args):
        """getOrd(SuperSingularEllipticCurve self, int step) -> Integer"""
        return _AAL.SuperSingularEllipticCurve_getOrd(self, *args)

    def equals(self, *args):
        """equals(SuperSingularEllipticCurve self, EllipticCurveGF2 eCurve) -> bool"""
        return _AAL.SuperSingularEllipticCurve_equals(self, *args)

    def inGroup(self, *args):
        """inGroup(SuperSingularEllipticCurve self, Polynom x, Polynom y) -> bool"""
        return _AAL.SuperSingularEllipticCurve_inGroup(self, *args)

    def rightSide(self, *args):
        """rightSide(SuperSingularEllipticCurve self, Polynom x) -> Polynom"""
        return _AAL.SuperSingularEllipticCurve_rightSide(self, *args)

    def hasY(self, *args):
        """hasY(SuperSingularEllipticCurve self, Polynom x) -> bool"""
        return _AAL.SuperSingularEllipticCurve_hasY(self, *args)

    def __repr__(self):
        """__repr__(SuperSingularEllipticCurve self) -> char *"""
        return _AAL.SuperSingularEllipticCurve___repr__(self)

SuperSingularEllipticCurve_swigregister = _AAL.SuperSingularEllipticCurve_swigregister
SuperSingularEllipticCurve_swigregister(SuperSingularEllipticCurve)

class EllipticPointGF2(_object):
    """Proxy of C++ AAL::EllipticPointGF2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticPointGF2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticPointGF2, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _AAL.delete_EllipticPointGF2
    __del__ = lambda self : None;
    def getCurve(self):
        """getCurve(EllipticPointGF2 self) -> EllipticCurveGF2"""
        return _AAL.EllipticPointGF2_getCurve(self)

    def setCurve(self, *args):
        """setCurve(EllipticPointGF2 self, EllipticCurveGF2 curve) -> EllipticCurveGF2"""
        return _AAL.EllipticPointGF2_setCurve(self, *args)

    def getX(self):
        """getX(EllipticPointGF2 self) -> Polynom"""
        return _AAL.EllipticPointGF2_getX(self)

    def getY(self):
        """getY(EllipticPointGF2 self) -> Polynom"""
        return _AAL.EllipticPointGF2_getY(self)

    def setXY(self, *args):
        """setXY(EllipticPointGF2 self, Polynom x, Polynom y) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2_setXY(self, *args)

    def isInfinite(self):
        """isInfinite(EllipticPointGF2 self) -> bool"""
        return _AAL.EllipticPointGF2_isInfinite(self)

    def setInfinite(self, *args):
        """setInfinite(EllipticPointGF2 self, bool infinite) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2_setInfinite(self, *args)

    def Negate(self, *args):
        """
        Negate(EllipticPointGF2 self) -> EllipticPointGF2
        Negate(EllipticPointGF2 self, EllipticPointGF2 ePoint) -> EllipticPointGF2
        """
        return _AAL.EllipticPointGF2_Negate(self, *args)

    def __iadd__(self, *args):
        """__iadd__(EllipticPointGF2 self, EllipticPointGF2 ePoint) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2___iadd__(self, *args)

    def Add(self, *args):
        """Add(EllipticPointGF2 self, EllipticPointGF2 ePoint1, EllipticPointGF2 ePoint2) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2_Add(self, *args)

    def Double(self, *args):
        """
        Double(EllipticPointGF2 self) -> EllipticPointGF2
        Double(EllipticPointGF2 self, EllipticPointGF2 ePoint) -> EllipticPointGF2
        """
        return _AAL.EllipticPointGF2_Double(self, *args)

    def __imul__(self, *args):
        """__imul__(EllipticPointGF2 self, Integer i) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2___imul__(self, *args)

    def Mul(self, *args):
        """Mul(EllipticPointGF2 self, EllipticPointGF2 ePoint, Integer i) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2_Mul(self, *args)

    def Generate(self):
        """Generate(EllipticPointGF2 self) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2_Generate(self)

    def WrappingGenerate(self, *args):
        """WrappingGenerate(EllipticPointGF2 self, Polynom xforwrap) -> EllipticPointGF2"""
        return _AAL.EllipticPointGF2_WrappingGenerate(self, *args)

    def DLK(self, *args):
        """
        DLK(EllipticPointGF2 self, EllipticPointGF2 ePoint1, EllipticPointGF2 ePoint2, PolynomGF2_m_4 t, int n, PolynomGF2_m_4 b, 
            Polynom mod) -> PolynomGF2_m_4
        """
        return _AAL.EllipticPointGF2_DLK(self, *args)

    def findRo(self, *args):
        """findRo(EllipticPointGF2 self, Polynom module, PolynomGF2_m_4 b) -> PolynomGF2_m_4"""
        return _AAL.EllipticPointGF2_findRo(self, *args)

    def __repr__(self):
        """__repr__(EllipticPointGF2 self) -> char *"""
        return _AAL.EllipticPointGF2___repr__(self)

EllipticPointGF2_swigregister = _AAL.EllipticPointGF2_swigregister
EllipticPointGF2_swigregister(EllipticPointGF2)

class SuperSingularEllipticPoint(EllipticPointGF2):
    """Proxy of C++ AAL::SuperSingularEllipticPoint class"""
    __swig_setmethods__ = {}
    for _s in [EllipticPointGF2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SuperSingularEllipticPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticPointGF2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SuperSingularEllipticPoint, name)
    def __init__(self, *args): 
        """
        __init__(AAL::SuperSingularEllipticPoint self) -> SuperSingularEllipticPoint
        __init__(AAL::SuperSingularEllipticPoint self, SuperSingularEllipticCurve eCurve) -> SuperSingularEllipticPoint
        __init__(AAL::SuperSingularEllipticPoint self, SuperSingularEllipticPoint ePoint) -> SuperSingularEllipticPoint
        """
        this = _AAL.new_SuperSingularEllipticPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_SuperSingularEllipticPoint
    __del__ = lambda self : None;
    def setCurve(self, *args):
        """setCurve(SuperSingularEllipticPoint self, EllipticCurveGF2 eCurve) -> SuperSingularEllipticCurve"""
        return _AAL.SuperSingularEllipticPoint_setCurve(self, *args)

    def Negate(self, *args):
        """
        Negate(SuperSingularEllipticPoint self) -> EllipticPointGF2
        Negate(SuperSingularEllipticPoint self, EllipticPointGF2 ePoint) -> EllipticPointGF2
        """
        return _AAL.SuperSingularEllipticPoint_Negate(self, *args)

    def Add(self, *args):
        """Add(SuperSingularEllipticPoint self, EllipticPointGF2 ePoint1, EllipticPointGF2 ePoint2) -> EllipticPointGF2"""
        return _AAL.SuperSingularEllipticPoint_Add(self, *args)

    def Double(self, *args):
        """
        Double(SuperSingularEllipticPoint self) -> EllipticPointGF2
        Double(SuperSingularEllipticPoint self, EllipticPointGF2 e) -> EllipticPointGF2
        """
        return _AAL.SuperSingularEllipticPoint_Double(self, *args)

    def Mul(self, *args):
        """Mul(SuperSingularEllipticPoint self, EllipticPointGF2 ePoint, Integer i) -> EllipticPointGF2"""
        return _AAL.SuperSingularEllipticPoint_Mul(self, *args)

    def __repr__(self):
        """__repr__(SuperSingularEllipticPoint self) -> char *"""
        return _AAL.SuperSingularEllipticPoint___repr__(self)

SuperSingularEllipticPoint_swigregister = _AAL.SuperSingularEllipticPoint_swigregister
SuperSingularEllipticPoint_swigregister(SuperSingularEllipticPoint)

class NonSuperSingularEllipticCurve(EllipticCurveGF2):
    """Proxy of C++ AAL::NonSuperSingularEllipticCurve class"""
    __swig_setmethods__ = {}
    for _s in [EllipticCurveGF2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonSuperSingularEllipticCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticCurveGF2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonSuperSingularEllipticCurve, name)
    def __init__(self, *args): 
        """
        __init__(AAL::NonSuperSingularEllipticCurve self) -> NonSuperSingularEllipticCurve
        __init__(AAL::NonSuperSingularEllipticCurve self, Polynom module, Polynom a2, Polynom a6) -> NonSuperSingularEllipticCurve
        __init__(AAL::NonSuperSingularEllipticCurve self, NonSuperSingularEllipticCurve eCurve) -> NonSuperSingularEllipticCurve
        """
        this = _AAL.new_NonSuperSingularEllipticCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_NonSuperSingularEllipticCurve
    __del__ = lambda self : None;
    def setModule(self, *args):
        """setModule(NonSuperSingularEllipticCurve self, Polynom module) -> Polynom"""
        return _AAL.NonSuperSingularEllipticCurve_setModule(self, *args)

    def getA2(self):
        """getA2(NonSuperSingularEllipticCurve self) -> Polynom"""
        return _AAL.NonSuperSingularEllipticCurve_getA2(self)

    def getA6(self):
        """getA6(NonSuperSingularEllipticCurve self) -> Polynom"""
        return _AAL.NonSuperSingularEllipticCurve_getA6(self)

    def setA2(self, *args):
        """setA2(NonSuperSingularEllipticCurve self, Polynom a2) -> Polynom"""
        return _AAL.NonSuperSingularEllipticCurve_setA2(self, *args)

    def setA6(self, *args):
        """setA6(NonSuperSingularEllipticCurve self, Polynom a6) -> Polynom"""
        return _AAL.NonSuperSingularEllipticCurve_setA6(self, *args)

    def isSuperSingular(self):
        """isSuperSingular(NonSuperSingularEllipticCurve self) -> bool"""
        return _AAL.NonSuperSingularEllipticCurve_isSuperSingular(self)

    def isNonSuperSingular(self):
        """isNonSuperSingular(NonSuperSingularEllipticCurve self) -> bool"""
        return _AAL.NonSuperSingularEllipticCurve_isNonSuperSingular(self)

    def getOrder(self):
        """getOrder(NonSuperSingularEllipticCurve self) -> Integer"""
        return _AAL.NonSuperSingularEllipticCurve_getOrder(self)

    def equals(self, *args):
        """equals(NonSuperSingularEllipticCurve self, EllipticCurveGF2 eCurve) -> bool"""
        return _AAL.NonSuperSingularEllipticCurve_equals(self, *args)

    def inGroup(self, *args):
        """inGroup(NonSuperSingularEllipticCurve self, Polynom x, Polynom y) -> bool"""
        return _AAL.NonSuperSingularEllipticCurve_inGroup(self, *args)

    def rightSide(self, *args):
        """rightSide(NonSuperSingularEllipticCurve self, Polynom x) -> Polynom"""
        return _AAL.NonSuperSingularEllipticCurve_rightSide(self, *args)

    def hasY(self, *args):
        """hasY(NonSuperSingularEllipticCurve self, Polynom x) -> bool"""
        return _AAL.NonSuperSingularEllipticCurve_hasY(self, *args)

    def __repr__(self):
        """__repr__(NonSuperSingularEllipticCurve self) -> char *"""
        return _AAL.NonSuperSingularEllipticCurve___repr__(self)

NonSuperSingularEllipticCurve_swigregister = _AAL.NonSuperSingularEllipticCurve_swigregister
NonSuperSingularEllipticCurve_swigregister(NonSuperSingularEllipticCurve)

class NonSuperSingularEllipticPoint(EllipticPointGF2):
    """Proxy of C++ AAL::NonSuperSingularEllipticPoint class"""
    __swig_setmethods__ = {}
    for _s in [EllipticPointGF2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonSuperSingularEllipticPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticPointGF2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonSuperSingularEllipticPoint, name)
    def __init__(self, *args): 
        """
        __init__(AAL::NonSuperSingularEllipticPoint self) -> NonSuperSingularEllipticPoint
        __init__(AAL::NonSuperSingularEllipticPoint self, NonSuperSingularEllipticCurve eCurve) -> NonSuperSingularEllipticPoint
        __init__(AAL::NonSuperSingularEllipticPoint self, NonSuperSingularEllipticPoint ePoint) -> NonSuperSingularEllipticPoint
        """
        this = _AAL.new_NonSuperSingularEllipticPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_NonSuperSingularEllipticPoint
    __del__ = lambda self : None;
    def setCurve(self, *args):
        """setCurve(NonSuperSingularEllipticPoint self, EllipticCurveGF2 eCurve) -> NonSuperSingularEllipticCurve"""
        return _AAL.NonSuperSingularEllipticPoint_setCurve(self, *args)

    def Negate(self, *args):
        """
        Negate(NonSuperSingularEllipticPoint self) -> EllipticPointGF2
        Negate(NonSuperSingularEllipticPoint self, EllipticPointGF2 ePoint) -> EllipticPointGF2
        """
        return _AAL.NonSuperSingularEllipticPoint_Negate(self, *args)

    def Add(self, *args):
        """Add(NonSuperSingularEllipticPoint self, EllipticPointGF2 ePoint1, EllipticPointGF2 ePoint2) -> EllipticPointGF2"""
        return _AAL.NonSuperSingularEllipticPoint_Add(self, *args)

    def Double(self, *args):
        """
        Double(NonSuperSingularEllipticPoint self) -> EllipticPointGF2
        Double(NonSuperSingularEllipticPoint self, EllipticPointGF2 e) -> EllipticPointGF2
        """
        return _AAL.NonSuperSingularEllipticPoint_Double(self, *args)

    def Mul(self, *args):
        """Mul(NonSuperSingularEllipticPoint self, EllipticPointGF2 ePoint, Integer i) -> EllipticPointGF2"""
        return _AAL.NonSuperSingularEllipticPoint_Mul(self, *args)

    def __repr__(self):
        """__repr__(NonSuperSingularEllipticPoint self) -> char *"""
        return _AAL.NonSuperSingularEllipticPoint___repr__(self)

NonSuperSingularEllipticPoint_swigregister = _AAL.NonSuperSingularEllipticPoint_swigregister
NonSuperSingularEllipticPoint_swigregister(NonSuperSingularEllipticPoint)

class EllipticCurveGF3(_object):
    """Proxy of C++ AAL::EllipticCurveGF3 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticCurveGF3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticCurveGF3, name)
    def __init__(self, *args): 
        """
        __init__(AAL::EllipticCurveGF3 self) -> EllipticCurveGF3
        __init__(AAL::EllipticCurveGF3 self, PolynomGF3 module, PolynomGF3 a2, PolynomGF3 a4, PolynomGF3 a6) -> EllipticCurveGF3
        __init__(AAL::EllipticCurveGF3 self, EllipticCurveGF3 eCurve) -> EllipticCurveGF3
        """
        this = _AAL.new_EllipticCurveGF3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_EllipticCurveGF3
    __del__ = lambda self : None;
    def setModule(self, *args):
        """setModule(EllipticCurveGF3 self, PolynomGF3 module) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_setModule(self, *args)

    def getModule(self):
        """getModule(EllipticCurveGF3 self) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_getModule(self)

    def getA2(self):
        """getA2(EllipticCurveGF3 self) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_getA2(self)

    def getA4(self):
        """getA4(EllipticCurveGF3 self) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_getA4(self)

    def getA6(self):
        """getA6(EllipticCurveGF3 self) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_getA6(self)

    def setA2(self, *args):
        """setA2(EllipticCurveGF3 self, PolynomGF3 a2) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_setA2(self, *args)

    def setA4(self, *args):
        """setA4(EllipticCurveGF3 self, PolynomGF3 a4) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_setA4(self, *args)

    def setA6(self, *args):
        """setA6(EllipticCurveGF3 self, PolynomGF3 a6) -> PolynomGF3"""
        return _AAL.EllipticCurveGF3_setA6(self, *args)

    def equals(self, *args):
        """equals(EllipticCurveGF3 self, EllipticCurveGF3 eCurve) -> bool"""
        return _AAL.EllipticCurveGF3_equals(self, *args)

    def inGroup(self, *args):
        """inGroup(EllipticCurveGF3 self, PolynomGF3 x, PolynomGF3 y) -> bool"""
        return _AAL.EllipticCurveGF3_inGroup(self, *args)

    def __repr__(self):
        """__repr__(EllipticCurveGF3 self) -> char *"""
        return _AAL.EllipticCurveGF3___repr__(self)

EllipticCurveGF3_swigregister = _AAL.EllipticCurveGF3_swigregister
EllipticCurveGF3_swigregister(EllipticCurveGF3)

class EllipticPointGF3(_object):
    """Proxy of C++ AAL::EllipticPointGF3 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipticPointGF3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticPointGF3, name)
    def __init__(self, *args): 
        """
        __init__(AAL::EllipticPointGF3 self) -> EllipticPointGF3
        __init__(AAL::EllipticPointGF3 self, EllipticCurveGF3 eCurve) -> EllipticPointGF3
        __init__(AAL::EllipticPointGF3 self, EllipticPointGF3 ePoint) -> EllipticPointGF3
        """
        this = _AAL.new_EllipticPointGF3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_EllipticPointGF3
    __del__ = lambda self : None;
    def getCurve(self):
        """getCurve(EllipticPointGF3 self) -> EllipticCurveGF3"""
        return _AAL.EllipticPointGF3_getCurve(self)

    def setCurve(self, *args):
        """setCurve(EllipticPointGF3 self, EllipticCurveGF3 curve) -> EllipticCurveGF3"""
        return _AAL.EllipticPointGF3_setCurve(self, *args)

    def getX(self):
        """getX(EllipticPointGF3 self) -> PolynomGF3"""
        return _AAL.EllipticPointGF3_getX(self)

    def getY(self):
        """getY(EllipticPointGF3 self) -> PolynomGF3"""
        return _AAL.EllipticPointGF3_getY(self)

    def setXY(self, *args):
        """setXY(EllipticPointGF3 self, PolynomGF3 x, PolynomGF3 y) -> EllipticPointGF3"""
        return _AAL.EllipticPointGF3_setXY(self, *args)

    def isInfinite(self):
        """isInfinite(EllipticPointGF3 self) -> bool"""
        return _AAL.EllipticPointGF3_isInfinite(self)

    def setInfinite(self, *args):
        """setInfinite(EllipticPointGF3 self, bool infinite) -> EllipticPointGF3"""
        return _AAL.EllipticPointGF3_setInfinite(self, *args)

    def Negate(self, *args):
        """
        Negate(EllipticPointGF3 self) -> EllipticPointGF3
        Negate(EllipticPointGF3 self, EllipticPointGF3 ePoint) -> EllipticPointGF3
        """
        return _AAL.EllipticPointGF3_Negate(self, *args)

    def __iadd__(self, *args):
        """__iadd__(EllipticPointGF3 self, EllipticPointGF3 ePoint) -> EllipticPointGF3"""
        return _AAL.EllipticPointGF3___iadd__(self, *args)

    def Add(self, *args):
        """Add(EllipticPointGF3 self, EllipticPointGF3 ePoint1, EllipticPointGF3 ePoint2) -> EllipticPointGF3"""
        return _AAL.EllipticPointGF3_Add(self, *args)

    def Double(self, *args):
        """
        Double(EllipticPointGF3 self) -> EllipticPointGF3
        Double(EllipticPointGF3 self, EllipticPointGF3 ePoint) -> EllipticPointGF3
        """
        return _AAL.EllipticPointGF3_Double(self, *args)

    def __imul__(self, *args):
        """__imul__(EllipticPointGF3 self, Integer i) -> EllipticPointGF3"""
        return _AAL.EllipticPointGF3___imul__(self, *args)

    def Mul(self, *args):
        """Mul(EllipticPointGF3 self, EllipticPointGF3 ePoint, Integer integer) -> EllipticPointGF3"""
        return _AAL.EllipticPointGF3_Mul(self, *args)

    def Generate(self, *args):
        """
        Generate(EllipticPointGF3 self) -> EllipticPointGF3
        Generate(EllipticPointGF3 self, PolynomGF3 mes) -> EllipticPointGF3
        """
        return _AAL.EllipticPointGF3_Generate(self, *args)

    def DLK(self, *args):
        """
        DLK(EllipticPointGF3 self, EllipticPointGF3 ePoint1, EllipticPointGF3 ePoint2, PolynomGF3_m_6 ro, PolynomGF3_m_6 si, 
            int n, PolynomGF3_m_6 b, PolynomGF3 mod) -> PolynomGF3_m_6
        """
        return _AAL.EllipticPointGF3_DLK(self, *args)

    def findRo(self, *args):
        """findRo(EllipticPointGF3 self, PolynomGF3 module, PolynomGF3_m_6 b) -> PolynomGF3_m_6"""
        return _AAL.EllipticPointGF3_findRo(self, *args)

    def __repr__(self):
        """__repr__(EllipticPointGF3 self) -> char *"""
        return _AAL.EllipticPointGF3___repr__(self)

EllipticPointGF3_swigregister = _AAL.EllipticPointGF3_swigregister
EllipticPointGF3_swigregister(EllipticPointGF3)

class FactorizationAlgorithms(_object):
    """Proxy of C++ AAL::FactorizationAlgorithms class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FactorizationAlgorithms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FactorizationAlgorithms, name)
    def __init__(self, *args): 
        """__init__(AAL::FactorizationAlgorithms self, Integer number) -> FactorizationAlgorithms"""
        this = _AAL.new_FactorizationAlgorithms(*args)
        try: self.this.append(this)
        except: self.this = this
    def MsieveDecomposition(self):
        """MsieveDecomposition(FactorizationAlgorithms self) -> DecompositionMemberVector"""
        return _AAL.FactorizationAlgorithms_MsieveDecomposition(self)

    def ProbingDivisionAlgorithmDecomposition(self):
        """ProbingDivisionAlgorithmDecomposition(FactorizationAlgorithms self) -> DecompositionMemberVector"""
        return _AAL.FactorizationAlgorithms_ProbingDivisionAlgorithmDecomposition(self)

    def FermaAlgorithm(self, *args):
        """FermaAlgorithm(FactorizationAlgorithms self, Integer number) -> Integer"""
        return _AAL.FactorizationAlgorithms_FermaAlgorithm(self, *args)

    def FermaAlgorithmDecomposition(self):
        """FermaAlgorithmDecomposition(FactorizationAlgorithms self) -> DecompositionMemberVector"""
        return _AAL.FactorizationAlgorithms_FermaAlgorithmDecomposition(self)

    def P0AlgorithmDecomposition(self):
        """P0AlgorithmDecomposition(FactorizationAlgorithms self) -> DecompositionMemberVector"""
        return _AAL.FactorizationAlgorithms_P0AlgorithmDecomposition(self)

    def FastP0AlgorithmDecomposition(self):
        """FastP0AlgorithmDecomposition(FactorizationAlgorithms self) -> DecompositionMemberVector"""
        return _AAL.FactorizationAlgorithms_FastP0AlgorithmDecomposition(self)

    def __repr__(self):
        """__repr__(FactorizationAlgorithms self) -> char *"""
        return _AAL.FactorizationAlgorithms___repr__(self)

    __swig_destroy__ = _AAL.delete_FactorizationAlgorithms
    __del__ = lambda self : None;
FactorizationAlgorithms_swigregister = _AAL.FactorizationAlgorithms_swigregister
FactorizationAlgorithms_swigregister(FactorizationAlgorithms)

class NumberVector(_object):
    """Proxy of C++ AAL::NumberVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumberVector, name)
    def __init__(self, *args): 
        """
        __init__(AAL::NumberVector self) -> NumberVector
        __init__(AAL::NumberVector self, NumberVector numberVector) -> NumberVector
        __init__(AAL::NumberVector self, std::string const dataString, AAL::NumericSystem system=Dec) -> NumberVector
        __init__(AAL::NumberVector self, std::string const dataString) -> NumberVector
        """
        this = _AAL.new_NumberVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def Parse(self, *args):
        """
        Parse(NumberVector self, std::string const dataString, AAL::NumericSystem system=Dec) -> NumberVector
        Parse(NumberVector self, std::string const dataString) -> NumberVector
        """
        return _AAL.NumberVector_Parse(self, *args)

    def ToString(self, *args):
        """
        ToString(NumberVector self, AAL::NumericSystem system=Dec) -> std::string
        ToString(NumberVector self) -> std::string
        """
        return _AAL.NumberVector_ToString(self, *args)

    def Compare(self, *args):
        """Compare(NumberVector self, NumberVector numberVector) -> NumberVector"""
        return _AAL.NumberVector_Compare(self, *args)

    def setZero(self):
        """setZero(NumberVector self) -> NumberVector"""
        return _AAL.NumberVector_setZero(self)

    def isZero(self):
        """isZero(NumberVector self) -> bool"""
        return _AAL.NumberVector_isZero(self)

    def getNumberBits(self):
        """getNumberBits(NumberVector self) -> AAL::uint"""
        return _AAL.NumberVector_getNumberBits(self)

    def getNumberBytes(self):
        """getNumberBytes(NumberVector self) -> AAL::uint"""
        return _AAL.NumberVector_getNumberBytes(self)

    def getNumberDigits(self):
        """getNumberDigits(NumberVector self) -> std::vector< AAL::Integer *,std::allocator< AAL::Integer * > >::size_type"""
        return _AAL.NumberVector_getNumberDigits(self)

    def getNumber(self, *args):
        """getNumber(NumberVector self, std::vector< AAL::Integer *,std::allocator< AAL::Integer * > >::size_type position) -> Integer"""
        return _AAL.NumberVector_getNumber(self, *args)

    def setNumber(self, *args):
        """
        setNumber(NumberVector self, std::vector< AAL::Integer *,std::allocator< AAL::Integer * > >::size_type position, 
            Integer integer)
        """
        return _AAL.NumberVector_setNumber(self, *args)

    def __iadd__(self, *args):
        """__iadd__(NumberVector self, NumberVector numberVector) -> NumberVector"""
        return _AAL.NumberVector___iadd__(self, *args)

    def Add(self, *args):
        """Add(NumberVector self, NumberVector a, NumberVector b) -> NumberVector"""
        return _AAL.NumberVector_Add(self, *args)

    def ModAdd(self, *args):
        """ModAdd(NumberVector self, NumberVector a, NumberVector b, Integer module) -> NumberVector"""
        return _AAL.NumberVector_ModAdd(self, *args)

    def __isub__(self, *args):
        """__isub__(NumberVector self, NumberVector numberVector) -> NumberVector"""
        return _AAL.NumberVector___isub__(self, *args)

    def Sub(self, *args):
        """Sub(NumberVector self, NumberVector a, NumberVector b) -> NumberVector"""
        return _AAL.NumberVector_Sub(self, *args)

    def ModSub(self, *args):
        """ModSub(NumberVector self, NumberVector a, NumberVector b, Integer module) -> NumberVector"""
        return _AAL.NumberVector_ModSub(self, *args)

    def __repr__(self):
        """__repr__(NumberVector self) -> char *"""
        return _AAL.NumberVector___repr__(self)

    __swig_destroy__ = _AAL.delete_NumberVector
    __del__ = lambda self : None;
NumberVector_swigregister = _AAL.NumberVector_swigregister
NumberVector_swigregister(NumberVector)

class PolynomGF2_m_4(_object):
    """Proxy of C++ AAL::PolynomGF2_m_4 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomGF2_m_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomGF2_m_4, name)
    def __init__(self, *args): 
        """
        __init__(AAL::PolynomGF2_m_4 self) -> PolynomGF2_m_4
        __init__(AAL::PolynomGF2_m_4 self, PolynomGF2_m_4 polynom) -> PolynomGF2_m_4
        __init__(AAL::PolynomGF2_m_4 self, std::string const a0, std::string const a1, std::string const a2, std::string const a3, 
            std::string const module) -> PolynomGF2_m_4
        """
        this = _AAL.new_PolynomGF2_m_4(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOne(self):
        """setOne(PolynomGF2_m_4 self) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_setOne(self)

    def setZero(self):
        """setZero(PolynomGF2_m_4 self) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_setZero(self)

    def isZero(self):
        """isZero(PolynomGF2_m_4 self) -> bool"""
        return _AAL.PolynomGF2_m_4_isZero(self)

    def isOne(self):
        """isOne(PolynomGF2_m_4 self) -> bool"""
        return _AAL.PolynomGF2_m_4_isOne(self)

    def getA0(self):
        """getA0(PolynomGF2_m_4 self) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getA0(self)

    def getA1(self):
        """getA1(PolynomGF2_m_4 self) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getA1(self)

    def getA2(self):
        """getA2(PolynomGF2_m_4 self) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getA2(self)

    def getA3(self):
        """getA3(PolynomGF2_m_4 self) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getA3(self)

    def setA0(self, *args):
        """setA0(PolynomGF2_m_4 self, Polynom a)"""
        return _AAL.PolynomGF2_m_4_setA0(self, *args)

    def setA1(self, *args):
        """setA1(PolynomGF2_m_4 self, Polynom a)"""
        return _AAL.PolynomGF2_m_4_setA1(self, *args)

    def setA2(self, *args):
        """setA2(PolynomGF2_m_4 self, Polynom a)"""
        return _AAL.PolynomGF2_m_4_setA2(self, *args)

    def setA3(self, *args):
        """setA3(PolynomGF2_m_4 self, Polynom a)"""
        return _AAL.PolynomGF2_m_4_setA3(self, *args)

    def getModule(self):
        """getModule(PolynomGF2_m_4 self) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getModule(self)

    def getModPolynom(self):
        """getModPolynom(PolynomGF2_m_4 self) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getModPolynom(self)

    def setModPolynom(self, *args):
        """setModPolynom(PolynomGF2_m_4 self, Polynom modPolynom)"""
        return _AAL.PolynomGF2_m_4_setModPolynom(self, *args)

    def setModule(self, *args):
        """setModule(PolynomGF2_m_4 self, Polynom module)"""
        return _AAL.PolynomGF2_m_4_setModule(self, *args)

    def exist(self, *args):
        """exist(PolynomGF2_m_4 self, Polynom a, Polynom module)"""
        return _AAL.PolynomGF2_m_4_exist(self, *args)

    def getByIndex(self, *args):
        """getByIndex(PolynomGF2_m_4 self, int index) -> Polynom"""
        return _AAL.PolynomGF2_m_4_getByIndex(self, *args)

    def setByIndex(self, *args):
        """setByIndex(PolynomGF2_m_4 self, Polynom a, int index)"""
        return _AAL.PolynomGF2_m_4_setByIndex(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PolynomGF2_m_4 self, PolynomGF2_m_4 polynom) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4___iadd__(self, *args)

    def Add(self, *args):
        """Add(PolynomGF2_m_4 self, PolynomGF2_m_4 a, PolynomGF2_m_4 b) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_Add(self, *args)

    def __imul__(self, *args):
        """__imul__(PolynomGF2_m_4 self, PolynomGF2_m_4 polynom) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4___imul__(self, *args)

    def Mul(self, *args):
        """Mul(PolynomGF2_m_4 self, PolynomGF2_m_4 a, PolynomGF2_m_4 b) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_Mul(self, *args)

    def Square(self, *args):
        """Square(PolynomGF2_m_4 self, PolynomGF2_m_4 a) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_Square(self, *args)

    def Pow(self, *args):
        """Pow(PolynomGF2_m_4 self, PolynomGF2_m_4 a, Integer n) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_Pow(self, *args)

    def Sqrt(self, *args):
        """Sqrt(PolynomGF2_m_4 self, PolynomGF2_m_4 a, Polynom module) -> PolynomGF2_m_4"""
        return _AAL.PolynomGF2_m_4_Sqrt(self, *args)

    def Inverse(self, *args):
        """
        Inverse(PolynomGF2_m_4 self, Polynom module) -> PolynomGF2_m_4
        Inverse(PolynomGF2_m_4 self, PolynomGF2_m_4 polynom, Polynom module) -> PolynomGF2_m_4
        """
        return _AAL.PolynomGF2_m_4_Inverse(self, *args)

    def deg(self):
        """deg(PolynomGF2_m_4 self) -> int"""
        return _AAL.PolynomGF2_m_4_deg(self)

    def elementOrder(self, *args):
        """elementOrder(PolynomGF2_m_4 self, Polynom groupModule, PolynomGF2_m_4 polynom, DecompositionMemberVector vector, Integer ord) -> Integer"""
        return _AAL.PolynomGF2_m_4_elementOrder(self, *args)

    def isGenerator(self, *args):
        """isGenerator(PolynomGF2_m_4 self, Polynom groupModule, PolynomGF2_m_4 polynom, DecompositionMemberVector vector, Integer ord) -> bool"""
        return _AAL.PolynomGF2_m_4_isGenerator(self, *args)

    def __repr__(self):
        """__repr__(PolynomGF2_m_4 self) -> char *"""
        return _AAL.PolynomGF2_m_4___repr__(self)

    __swig_destroy__ = _AAL.delete_PolynomGF2_m_4
    __del__ = lambda self : None;
PolynomGF2_m_4_swigregister = _AAL.PolynomGF2_m_4_swigregister
PolynomGF2_m_4_swigregister(PolynomGF2_m_4)

class PolynomGF3_m_6(_object):
    """Proxy of C++ AAL::PolynomGF3_m_6 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomGF3_m_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomGF3_m_6, name)
    def __init__(self, *args): 
        """
        __init__(AAL::PolynomGF3_m_6 self) -> PolynomGF3_m_6
        __init__(AAL::PolynomGF3_m_6 self, PolynomGF3_m_6 polynom) -> PolynomGF3_m_6
        __init__(AAL::PolynomGF3_m_6 self, std::string const a0, std::string const a1, std::string const a2, std::string const a3, 
            std::string const a4, std::string const a5, std::string const module) -> PolynomGF3_m_6
        """
        this = _AAL.new_PolynomGF3_m_6(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOne(self):
        """setOne(PolynomGF3_m_6 self) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_setOne(self)

    def setZero(self):
        """setZero(PolynomGF3_m_6 self) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_setZero(self)

    def isZero(self):
        """isZero(PolynomGF3_m_6 self) -> bool"""
        return _AAL.PolynomGF3_m_6_isZero(self)

    def isOne(self):
        """isOne(PolynomGF3_m_6 self) -> bool"""
        return _AAL.PolynomGF3_m_6_isOne(self)

    def getA0(self):
        """getA0(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getA0(self)

    def getA1(self):
        """getA1(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getA1(self)

    def getA2(self):
        """getA2(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getA2(self)

    def getA3(self):
        """getA3(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getA3(self)

    def getA4(self):
        """getA4(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getA4(self)

    def getA5(self):
        """getA5(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getA5(self)

    def setA0(self, *args):
        """setA0(PolynomGF3_m_6 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_m_6_setA0(self, *args)

    def setA1(self, *args):
        """setA1(PolynomGF3_m_6 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_m_6_setA1(self, *args)

    def setA2(self, *args):
        """setA2(PolynomGF3_m_6 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_m_6_setA2(self, *args)

    def setA3(self, *args):
        """setA3(PolynomGF3_m_6 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_m_6_setA3(self, *args)

    def setA4(self, *args):
        """setA4(PolynomGF3_m_6 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_m_6_setA4(self, *args)

    def setA5(self, *args):
        """setA5(PolynomGF3_m_6 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_m_6_setA5(self, *args)

    def getModule(self):
        """getModule(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getModule(self)

    def getModPolynom(self):
        """getModPolynom(PolynomGF3_m_6 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getModPolynom(self)

    def exist(self, *args):
        """exist(PolynomGF3_m_6 self, PolynomGF3 a, PolynomGF3 module)"""
        return _AAL.PolynomGF3_m_6_exist(self, *args)

    def setModPolynom(self, *args):
        """setModPolynom(PolynomGF3_m_6 self, PolynomGF3 modPolynom)"""
        return _AAL.PolynomGF3_m_6_setModPolynom(self, *args)

    def setModule(self, *args):
        """setModule(PolynomGF3_m_6 self, PolynomGF3 module)"""
        return _AAL.PolynomGF3_m_6_setModule(self, *args)

    def setByIndex(self, *args):
        """setByIndex(PolynomGF3_m_6 self, PolynomGF3 a, int index)"""
        return _AAL.PolynomGF3_m_6_setByIndex(self, *args)

    def getByIndex(self, *args):
        """getByIndex(PolynomGF3_m_6 self, int index) -> PolynomGF3"""
        return _AAL.PolynomGF3_m_6_getByIndex(self, *args)

    def deg(self):
        """deg(PolynomGF3_m_6 self) -> int"""
        return _AAL.PolynomGF3_m_6_deg(self)

    def Generate(self, *args):
        """Generate(PolynomGF3_m_6 self, PolynomGF3 module) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_Generate(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PolynomGF3_m_6 self, PolynomGF3_m_6 polynom) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6___iadd__(self, *args)

    def Add(self, *args):
        """Add(PolynomGF3_m_6 self, PolynomGF3_m_6 a, PolynomGF3_m_6 b) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_Add(self, *args)

    def __imul__(self, *args):
        """__imul__(PolynomGF3_m_6 self, PolynomGF3_m_6 polynom) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6___imul__(self, *args)

    def Mul(self, *args):
        """Mul(PolynomGF3_m_6 self, PolynomGF3_m_6 a, PolynomGF3_m_6 b) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_Mul(self, *args)

    def Cube(self, *args):
        """Cube(PolynomGF3_m_6 self, PolynomGF3_m_6 a) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_Cube(self, *args)

    def Pow(self, *args):
        """Pow(PolynomGF3_m_6 self, PolynomGF3_m_6 a, Integer n) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_Pow(self, *args)

    def LegendreSymbol(self, *args):
        """LegendreSymbol(PolynomGF3_m_6 self, PolynomGF3_m_6 a, PolynomGF3 module) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_LegendreSymbol(self, *args)

    def CubeRoot(self, *args):
        """CubeRoot(PolynomGF3_m_6 self, PolynomGF3_m_6 a, PolynomGF3 module) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_CubeRoot(self, *args)

    def Sqrt(self, *args):
        """Sqrt(PolynomGF3_m_6 self, PolynomGF3_m_6 a, PolynomGF3 module, Integer s, Integer T) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_Sqrt(self, *args)

    def Inverse(self, *args):
        """
        Inverse(PolynomGF3_m_6 self, PolynomGF3 module) -> PolynomGF3_m_6
        Inverse(PolynomGF3_m_6 self, PolynomGF3_m_6 polynom, PolynomGF3 module) -> PolynomGF3_m_6
        """
        return _AAL.PolynomGF3_m_6_Inverse(self, *args)

    def elementOrder(self, *args):
        """
        elementOrder(PolynomGF3_m_6 self, PolynomGF3 groupModule, PolynomGF3_m_6 polynom, DecompositionMemberVector vector, 
            Integer ord) -> Integer
        """
        return _AAL.PolynomGF3_m_6_elementOrder(self, *args)

    def isGenerator(self, *args):
        """
        isGenerator(PolynomGF3_m_6 self, PolynomGF3 groupModule, PolynomGF3_m_6 polynom, DecompositionMemberVector vector, 
            Integer ord) -> bool
        """
        return _AAL.PolynomGF3_m_6_isGenerator(self, *args)

    def getRo(self, *args):
        """getRo(PolynomGF3_m_6 self, PolynomGF3_m_6 polynom, PolynomGF3 mod) -> PolynomGF3_m_6"""
        return _AAL.PolynomGF3_m_6_getRo(self, *args)

    def __repr__(self):
        """__repr__(PolynomGF3_m_6 self) -> char *"""
        return _AAL.PolynomGF3_m_6___repr__(self)

    __swig_destroy__ = _AAL.delete_PolynomGF3_m_6
    __del__ = lambda self : None;
PolynomGF3_m_6_swigregister = _AAL.PolynomGF3_m_6_swigregister
PolynomGF3_m_6_swigregister(PolynomGF3_m_6)

class PolynomGF2_mY_7(_object):
    """Proxy of C++ AAL::PolynomGF2_mY_7 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomGF2_mY_7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomGF2_mY_7, name)
    def __init__(self, *args): 
        """
        __init__(AAL::PolynomGF2_mY_7 self) -> PolynomGF2_mY_7
        __init__(AAL::PolynomGF2_mY_7 self, PolynomGF2_mY_7 polynom) -> PolynomGF2_mY_7
        __init__(AAL::PolynomGF2_mY_7 self, std::string const a0, std::string const a1, std::string const a2, std::string const a3, 
            std::string const a4, std::string const a5, std::string const a6, std::string const module) -> PolynomGF2_mY_7
        """
        this = _AAL.new_PolynomGF2_mY_7(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOne(self):
        """setOne(PolynomGF2_mY_7 self) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_setOne(self)

    def setZero(self):
        """setZero(PolynomGF2_mY_7 self) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_setZero(self)

    def isZero(self):
        """isZero(PolynomGF2_mY_7 self) -> bool"""
        return _AAL.PolynomGF2_mY_7_isZero(self)

    def isOne(self):
        """isOne(PolynomGF2_mY_7 self) -> bool"""
        return _AAL.PolynomGF2_mY_7_isOne(self)

    def deg(self):
        """deg(PolynomGF2_mY_7 self) -> int"""
        return _AAL.PolynomGF2_mY_7_deg(self)

    def getA0(self):
        """getA0(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA0(self)

    def getA1(self):
        """getA1(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA1(self)

    def getA2(self):
        """getA2(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA2(self)

    def getA3(self):
        """getA3(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA3(self)

    def getA4(self):
        """getA4(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA4(self)

    def getA5(self):
        """getA5(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA5(self)

    def getA6(self):
        """getA6(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getA6(self)

    def getByIndex(self, *args):
        """getByIndex(PolynomGF2_mY_7 self, int index) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getByIndex(self, *args)

    def setByIndex(self, *args):
        """setByIndex(PolynomGF2_mY_7 self, Polynom a, int index)"""
        return _AAL.PolynomGF2_mY_7_setByIndex(self, *args)

    def setA0(self, *args):
        """setA0(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA0(self, *args)

    def setA1(self, *args):
        """setA1(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA1(self, *args)

    def setA2(self, *args):
        """setA2(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA2(self, *args)

    def setA3(self, *args):
        """setA3(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA3(self, *args)

    def setA4(self, *args):
        """setA4(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA4(self, *args)

    def setA5(self, *args):
        """setA5(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA5(self, *args)

    def setA6(self, *args):
        """setA6(PolynomGF2_mY_7 self, Polynom a)"""
        return _AAL.PolynomGF2_mY_7_setA6(self, *args)

    def getModule(self):
        """getModule(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getModule(self)

    def getModPolynom(self):
        """getModPolynom(PolynomGF2_mY_7 self) -> Polynom"""
        return _AAL.PolynomGF2_mY_7_getModPolynom(self)

    def setModPolynom(self, *args):
        """setModPolynom(PolynomGF2_mY_7 self, Polynom modPolynom)"""
        return _AAL.PolynomGF2_mY_7_setModPolynom(self, *args)

    def setModule(self, *args):
        """setModule(PolynomGF2_mY_7 self, Polynom module)"""
        return _AAL.PolynomGF2_mY_7_setModule(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PolynomGF2_mY_7 self, PolynomGF2_mY_7 polynom) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7___iadd__(self, *args)

    def Add(self, *args):
        """Add(PolynomGF2_mY_7 self, PolynomGF2_mY_7 a, PolynomGF2_mY_7 b) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_Add(self, *args)

    def Mul(self, *args):
        """Mul(PolynomGF2_mY_7 self, PolynomGF2_m_4 a, PolynomGF2_m_4 b) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_Mul(self, *args)

    def FullMul(self, *args):
        """FullMul(PolynomGF2_mY_7 self, PolynomGF2_mY_7 a, PolynomGF2_mY_7 b) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_FullMul(self, *args)

    def MonomialMul(self, *args):
        """MonomialMul(PolynomGF2_mY_7 self, PolynomGF2_mY_7 a, PolynomGF2_m_4 b) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_MonomialMul(self, *args)

    def NormalMonomialMul(self, *args):
        """NormalMonomialMul(PolynomGF2_mY_7 self, PolynomGF2_mY_7 a, int d) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_NormalMonomialMul(self, *args)

    def Div(self, *args):
        """Div(PolynomGF2_mY_7 self, PolynomGF2_mY_7 a, PolynomGF2_mY_7 b, Polynom module, PolynomGF2_mY_7 remainder) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_Div(self, *args)

    def GCD(self, *args):
        """GCD(PolynomGF2_mY_7 self, PolynomGF2_mY_7 a, PolynomGF2_mY_7 b, Polynom module) -> PolynomGF2_mY_7"""
        return _AAL.PolynomGF2_mY_7_GCD(self, *args)

    def __repr__(self):
        """__repr__(PolynomGF2_mY_7 self) -> char *"""
        return _AAL.PolynomGF2_mY_7___repr__(self)

    __swig_destroy__ = _AAL.delete_PolynomGF2_mY_7
    __del__ = lambda self : None;
PolynomGF2_mY_7_swigregister = _AAL.PolynomGF2_mY_7_swigregister
PolynomGF2_mY_7_swigregister(PolynomGF2_mY_7)

class PolynomGF3_mY_9(_object):
    """Proxy of C++ AAL::PolynomGF3_mY_9 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomGF3_mY_9, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomGF3_mY_9, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(AAL::PolynomGF3_mY_9 self) -> PolynomGF3_mY_9
        __init__(AAL::PolynomGF3_mY_9 self, PolynomGF3_mY_9 polynom) -> PolynomGF3_mY_9
        __init__(AAL::PolynomGF3_mY_9 self, std::string const a0, std::string const a1, std::string const a2, std::string const a3, 
            std::string const a4, std::string const a5, std::string const a6, std::string const a7, 
            std::string const a8, std::string const a9, std::string const a10, 
            std::string const module) -> PolynomGF3_mY_9
        """
        this = _AAL.new_PolynomGF3_mY_9(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOne(self):
        """setOne(PolynomGF3_mY_9 self) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_setOne(self)

    def setZero(self):
        """setZero(PolynomGF3_mY_9 self) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_setZero(self)

    def isZero(self):
        """isZero(PolynomGF3_mY_9 self) -> bool"""
        return _AAL.PolynomGF3_mY_9_isZero(self)

    def isOne(self):
        """isOne(PolynomGF3_mY_9 self) -> bool"""
        return _AAL.PolynomGF3_mY_9_isOne(self)

    def deg(self):
        """deg(PolynomGF3_mY_9 self) -> int"""
        return _AAL.PolynomGF3_mY_9_deg(self)

    def getA0(self):
        """getA0(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA0(self)

    def getA1(self):
        """getA1(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA1(self)

    def getA2(self):
        """getA2(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA2(self)

    def getA3(self):
        """getA3(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA3(self)

    def getA4(self):
        """getA4(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA4(self)

    def getA5(self):
        """getA5(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA5(self)

    def getA6(self):
        """getA6(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA6(self)

    def getA7(self):
        """getA7(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA7(self)

    def getA8(self):
        """getA8(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA8(self)

    def getA9(self):
        """getA9(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA9(self)

    def getA10(self):
        """getA10(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getA10(self)

    def getByIndex(self, *args):
        """getByIndex(PolynomGF3_mY_9 self, int index) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getByIndex(self, *args)

    def setByIndex(self, *args):
        """setByIndex(PolynomGF3_mY_9 self, PolynomGF3 a, int index)"""
        return _AAL.PolynomGF3_mY_9_setByIndex(self, *args)

    def setA0(self, *args):
        """setA0(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA0(self, *args)

    def setA1(self, *args):
        """setA1(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA1(self, *args)

    def setA2(self, *args):
        """setA2(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA2(self, *args)

    def setA3(self, *args):
        """setA3(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA3(self, *args)

    def setA4(self, *args):
        """setA4(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA4(self, *args)

    def setA5(self, *args):
        """setA5(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA5(self, *args)

    def setA6(self, *args):
        """setA6(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA6(self, *args)

    def setA7(self, *args):
        """setA7(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA7(self, *args)

    def setA8(self, *args):
        """setA8(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA8(self, *args)

    def setA9(self, *args):
        """setA9(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA9(self, *args)

    def setA10(self, *args):
        """setA10(PolynomGF3_mY_9 self, PolynomGF3 a)"""
        return _AAL.PolynomGF3_mY_9_setA10(self, *args)

    def getModule(self):
        """getModule(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getModule(self)

    def getModPolynom(self):
        """getModPolynom(PolynomGF3_mY_9 self) -> PolynomGF3"""
        return _AAL.PolynomGF3_mY_9_getModPolynom(self)

    def setModPolynom(self, *args):
        """setModPolynom(PolynomGF3_mY_9 self, PolynomGF3 modPolynom)"""
        return _AAL.PolynomGF3_mY_9_setModPolynom(self, *args)

    def setModule(self, *args):
        """setModule(PolynomGF3_mY_9 self, PolynomGF3 module)"""
        return _AAL.PolynomGF3_mY_9_setModule(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PolynomGF3_mY_9 self, PolynomGF3_mY_9 polynom) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9___iadd__(self, *args)

    def Add(self, *args):
        """Add(PolynomGF3_mY_9 self, PolynomGF3_mY_9 a, PolynomGF3_mY_9 b) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_Add(self, *args)

    def Mul(self, *args):
        """Mul(PolynomGF3_mY_9 self, PolynomGF3_m_6 a, PolynomGF3_m_6 b) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_Mul(self, *args)

    def FullMul(self, *args):
        """FullMul(PolynomGF3_mY_9 self, PolynomGF3_mY_9 a, PolynomGF3_mY_9 b) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_FullMul(self, *args)

    def MonomialMul(self, *args):
        """MonomialMul(PolynomGF3_mY_9 self, PolynomGF3_mY_9 a, PolynomGF3_m_6 b) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_MonomialMul(self, *args)

    def NormalMonomialMul(self, *args):
        """NormalMonomialMul(PolynomGF3_mY_9 self, PolynomGF3_mY_9 a, int d) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_NormalMonomialMul(self, *args)

    def Div(self, *args):
        """Div(PolynomGF3_mY_9 self, PolynomGF3_mY_9 a, PolynomGF3_mY_9 b, PolynomGF3 module, PolynomGF3_mY_9 remainder) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_Div(self, *args)

    def GCD(self, *args):
        """GCD(PolynomGF3_mY_9 self, PolynomGF3_mY_9 a, PolynomGF3_mY_9 b, PolynomGF3 module) -> PolynomGF3_mY_9"""
        return _AAL.PolynomGF3_mY_9_GCD(self, *args)

    __swig_destroy__ = _AAL.delete_PolynomGF3_mY_9
    __del__ = lambda self : None;
PolynomGF3_mY_9_swigregister = _AAL.PolynomGF3_mY_9_swigregister
PolynomGF3_mY_9_swigregister(PolynomGF3_mY_9)

class PolynomGF7(_object):
    """Proxy of C++ AAL::PolynomGF7 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomGF7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomGF7, name)
    __swig_setmethods__["A0"] = _AAL.PolynomGF7_A0_set
    __swig_getmethods__["A0"] = _AAL.PolynomGF7_A0_get
    if _newclass:A0 = _swig_property(_AAL.PolynomGF7_A0_get, _AAL.PolynomGF7_A0_set)
    __swig_setmethods__["A1"] = _AAL.PolynomGF7_A1_set
    __swig_getmethods__["A1"] = _AAL.PolynomGF7_A1_get
    if _newclass:A1 = _swig_property(_AAL.PolynomGF7_A1_get, _AAL.PolynomGF7_A1_set)
    __swig_setmethods__["A2"] = _AAL.PolynomGF7_A2_set
    __swig_getmethods__["A2"] = _AAL.PolynomGF7_A2_get
    if _newclass:A2 = _swig_property(_AAL.PolynomGF7_A2_get, _AAL.PolynomGF7_A2_set)
    def __init__(self, *args): 
        """
        __init__(AAL::PolynomGF7 self) -> PolynomGF7
        __init__(AAL::PolynomGF7 self, PolynomGF7 polynom) -> PolynomGF7
        __init__(AAL::PolynomGF7 self, std::string const dataString) -> PolynomGF7
        """
        this = _AAL.new_PolynomGF7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_PolynomGF7
    __del__ = lambda self : None;
    def Parse(self, *args):
        """Parse(PolynomGF7 self, std::string const dataString) -> PolynomGF7"""
        return _AAL.PolynomGF7_Parse(self, *args)

    def ToString(self):
        """ToString(PolynomGF7 self) -> std::string"""
        return _AAL.PolynomGF7_ToString(self)

    def isZero(self, *args):
        """
        isZero(PolynomGF7 self, PolynomGF7 module) -> bool
        isZero(PolynomGF7 self) -> bool
        """
        return _AAL.PolynomGF7_isZero(self, *args)

    def isOne(self):
        """isOne(PolynomGF7 self) -> bool"""
        return _AAL.PolynomGF7_isOne(self)

    def setTwo(self):
        """setTwo(PolynomGF7 self) -> PolynomGF7"""
        return _AAL.PolynomGF7_setTwo(self)

    def setOne(self):
        """setOne(PolynomGF7 self) -> PolynomGF7"""
        return _AAL.PolynomGF7_setOne(self)

    def setZero(self, *args):
        """
        setZero(PolynomGF7 self) -> PolynomGF7
        setZero(PolynomGF7 self, PolynomGF7 module) -> PolynomGF7
        """
        return _AAL.PolynomGF7_setZero(self, *args)

    def getBit(self, *args):
        """getBit(PolynomGF7 self, AAL::uint index) -> AAL::uint"""
        return _AAL.PolynomGF7_getBit(self, *args)

    def setBit(self, *args):
        """setBit(PolynomGF7 self, AAL::uint index, AAL::uint bit)"""
        return _AAL.PolynomGF7_setBit(self, *args)

    def __lshift__(self, *args):
        """__lshift__(PolynomGF7 self, int numberBits) -> PolynomGF7"""
        return _AAL.PolynomGF7___lshift__(self, *args)

    def __ilshift__(self, *args):
        """__ilshift__(PolynomGF7 self, int numberBits) -> PolynomGF7"""
        return _AAL.PolynomGF7___ilshift__(self, *args)

    def __rshift__(self, *args):
        """__rshift__(PolynomGF7 self, int numberBits) -> PolynomGF7"""
        return _AAL.PolynomGF7___rshift__(self, *args)

    def __irshift__(self, *args):
        """__irshift__(PolynomGF7 self, int numberBits) -> PolynomGF7"""
        return _AAL.PolynomGF7___irshift__(self, *args)

    def __sub__(self, *args):
        """__sub__(PolynomGF7 self, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7___sub__(self, *args)

    def __isub__(self, *args):
        """__isub__(PolynomGF7 self, PolynomGF7 polynom) -> PolynomGF7"""
        return _AAL.PolynomGF7___isub__(self, *args)

    def Sub(self, *args):
        """Sub(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7_Sub(self, *args)

    def __iadd__(self, *args):
        """__iadd__(PolynomGF7 self, PolynomGF7 polynom) -> PolynomGF7"""
        return _AAL.PolynomGF7___iadd__(self, *args)

    def Add(self, *args):
        """Add(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7_Add(self, *args)

    def ModAdd(self, *args):
        """ModAdd(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b, PolynomGF7 module) -> PolynomGF7"""
        return _AAL.PolynomGF7_ModAdd(self, *args)

    def __imul__(self, *args):
        """__imul__(PolynomGF7 self, PolynomGF7 polynom) -> PolynomGF7"""
        return _AAL.PolynomGF7___imul__(self, *args)

    def Mul(self, *args):
        """Mul(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7_Mul(self, *args)

    def MulToConstant(self, *args):
        """MulToConstant(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7_MulToConstant(self, *args)

    def ModMul(self, *args):
        """ModMul(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b, PolynomGF7 module) -> PolynomGF7"""
        return _AAL.PolynomGF7_ModMul(self, *args)

    def MulGF7_2n(self, *args):
        """
        MulGF7_2n(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b, PolynomGF7 c, PolynomGF7 d, PolynomGF7 module, PolynomGF7 g=None) -> PolynomGF7
        MulGF7_2n(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b, PolynomGF7 c, PolynomGF7 d, PolynomGF7 module) -> PolynomGF7
        """
        return _AAL.PolynomGF7_MulGF7_2n(self, *args)

    def MulGF7_14n(self, *args):
        """MulGF7_14n(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b, PolynomGF7 module) -> PolynomGF7"""
        return _AAL.PolynomGF7_MulGF7_14n(self, *args)

    def __div__(self, *args):
        """__div__(PolynomGF7 self, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7___div__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(PolynomGF7 self, PolynomGF7 polynom) -> PolynomGF7"""
        return _AAL.PolynomGF7___idiv__(self, *args)

    def Div(self, *args):
        """
        Div(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b, PolynomGF7 remainder=None) -> PolynomGF7
        Div(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b) -> PolynomGF7
        """
        return _AAL.PolynomGF7_Div(self, *args)

    def __imod__(self, *args):
        """__imod__(PolynomGF7 self, PolynomGF7 polynom) -> PolynomGF7"""
        return _AAL.PolynomGF7___imod__(self, *args)

    def Mod(self, *args):
        """Mod(PolynomGF7 self, PolynomGF7 a, PolynomGF7 b) -> PolynomGF7"""
        return _AAL.PolynomGF7_Mod(self, *args)

    def Pow(self, *args):
        """Pow(PolynomGF7 self, PolynomGF7 a, Integer n, PolynomGF7 module) -> PolynomGF7"""
        return _AAL.PolynomGF7_Pow(self, *args)

    def PowSeven_29(self, *args):
        """PowSeven_29(PolynomGF7 self, PolynomGF7 a, PolynomGF7 module, PolynomGF7 b, PolynomGF7 ax) -> PolynomGF7"""
        return _AAL.PolynomGF7_PowSeven_29(self, *args)

    def getNumberBits(self):
        """getNumberBits(PolynomGF7 self) -> AAL::uint"""
        return _AAL.PolynomGF7_getNumberBits(self)

    def Generate(self, *args):
        """
        Generate(PolynomGF7 self, PolynomGF7 module) -> PolynomGF7
        Generate(PolynomGF7 self, PolynomGF7 module, PolynomGF7 m) -> PolynomGF7
        """
        return _AAL.PolynomGF7_Generate(self, *args)

    def Inverse(self, *args):
        """
        Inverse(PolynomGF7 self, PolynomGF7 module) -> PolynomGF7
        Inverse(PolynomGF7 self, PolynomGF7 polynom, PolynomGF7 module) -> PolynomGF7
        """
        return _AAL.PolynomGF7_Inverse(self, *args)

    def __repr__(self):
        """__repr__(PolynomGF7 self) -> char *"""
        return _AAL.PolynomGF7___repr__(self)

PolynomGF7_swigregister = _AAL.PolynomGF7_swigregister
PolynomGF7_swigregister(PolynomGF7)

class StrVector(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(StrVector self) -> SwigPyIterator"""
        return _AAL.StrVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(StrVector self) -> bool"""
        return _AAL.StrVector___nonzero__(self)

    def __bool__(self):
        """__bool__(StrVector self) -> bool"""
        return _AAL.StrVector___bool__(self)

    def __len__(self):
        """__len__(StrVector self) -> std::vector< std::string >::size_type"""
        return _AAL.StrVector___len__(self)

    def pop(self):
        """pop(StrVector self) -> std::vector< std::string >::value_type"""
        return _AAL.StrVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StrVector"""
        return _AAL.StrVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            StrVector v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _AAL.StrVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _AAL.StrVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StrVector self, std::vector< std::string >::difference_type i)
        __delitem__(StrVector self, PySliceObject * slice)
        """
        return _AAL.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(StrVector self, PySliceObject * slice) -> StrVector
        __getitem__(StrVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _AAL.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(StrVector self, PySliceObject * slice, StrVector v)
        __setitem__(StrVector self, PySliceObject * slice)
        __setitem__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _AAL.StrVector___setitem__(self, *args)

    def append(self, *args):
        """append(StrVector self, std::vector< std::string >::value_type const & x)"""
        return _AAL.StrVector_append(self, *args)

    def empty(self):
        """empty(StrVector self) -> bool"""
        return _AAL.StrVector_empty(self)

    def size(self):
        """size(StrVector self) -> std::vector< std::string >::size_type"""
        return _AAL.StrVector_size(self)

    def clear(self):
        """clear(StrVector self)"""
        return _AAL.StrVector_clear(self)

    def swap(self, *args):
        """swap(StrVector self, StrVector v)"""
        return _AAL.StrVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(StrVector self) -> std::vector< std::string >::allocator_type"""
        return _AAL.StrVector_get_allocator(self)

    def begin(self):
        """begin(StrVector self) -> std::vector< std::string >::iterator"""
        return _AAL.StrVector_begin(self)

    def end(self):
        """end(StrVector self) -> std::vector< std::string >::iterator"""
        return _AAL.StrVector_end(self)

    def rbegin(self):
        """rbegin(StrVector self) -> std::vector< std::string >::reverse_iterator"""
        return _AAL.StrVector_rbegin(self)

    def rend(self):
        """rend(StrVector self) -> std::vector< std::string >::reverse_iterator"""
        return _AAL.StrVector_rend(self)

    def pop_back(self):
        """pop_back(StrVector self)"""
        return _AAL.StrVector_pop_back(self)

    def erase(self, *args):
        """
        erase(StrVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StrVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _AAL.StrVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> StrVector
        __init__(std::vector<(std::string)> self, StrVector arg2) -> StrVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StrVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StrVector
        """
        this = _AAL.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(StrVector self, std::vector< std::string >::value_type const & x)"""
        return _AAL.StrVector_push_back(self, *args)

    def front(self):
        """front(StrVector self) -> std::vector< std::string >::value_type const &"""
        return _AAL.StrVector_front(self)

    def back(self):
        """back(StrVector self) -> std::vector< std::string >::value_type const &"""
        return _AAL.StrVector_back(self)

    def assign(self, *args):
        """assign(StrVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _AAL.StrVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(StrVector self, std::vector< std::string >::size_type new_size)
        resize(StrVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _AAL.StrVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _AAL.StrVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(StrVector self, std::vector< std::string >::size_type n)"""
        return _AAL.StrVector_reserve(self, *args)

    def capacity(self):
        """capacity(StrVector self) -> std::vector< std::string >::size_type"""
        return _AAL.StrVector_capacity(self)

    __swig_destroy__ = _AAL.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _AAL.StrVector_swigregister
StrVector_swigregister(StrVector)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntVector self) -> SwigPyIterator"""
        return _AAL.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntVector self) -> bool"""
        return _AAL.IntVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntVector self) -> bool"""
        return _AAL.IntVector___bool__(self)

    def __len__(self):
        """__len__(IntVector self) -> std::vector< int >::size_type"""
        return _AAL.IntVector___len__(self)

    def pop(self):
        """pop(IntVector self) -> std::vector< int >::value_type"""
        return _AAL.IntVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _AAL.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v=std::vector< int,std::allocator< int > >())
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _AAL.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _AAL.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _AAL.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _AAL.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _AAL.IntVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntVector self, std::vector< int >::value_type const & x)"""
        return _AAL.IntVector_append(self, *args)

    def empty(self):
        """empty(IntVector self) -> bool"""
        return _AAL.IntVector_empty(self)

    def size(self):
        """size(IntVector self) -> std::vector< int >::size_type"""
        return _AAL.IntVector_size(self)

    def clear(self):
        """clear(IntVector self)"""
        return _AAL.IntVector_clear(self)

    def swap(self, *args):
        """swap(IntVector self, IntVector v)"""
        return _AAL.IntVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _AAL.IntVector_get_allocator(self)

    def begin(self):
        """begin(IntVector self) -> std::vector< int >::iterator"""
        return _AAL.IntVector_begin(self)

    def end(self):
        """end(IntVector self) -> std::vector< int >::iterator"""
        return _AAL.IntVector_end(self)

    def rbegin(self):
        """rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _AAL.IntVector_rbegin(self)

    def rend(self):
        """rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _AAL.IntVector_rend(self)

    def pop_back(self):
        """pop_back(IntVector self)"""
        return _AAL.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _AAL.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        this = _AAL.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _AAL.IntVector_push_back(self, *args)

    def front(self):
        """front(IntVector self) -> std::vector< int >::value_type const &"""
        return _AAL.IntVector_front(self)

    def back(self):
        """back(IntVector self) -> std::vector< int >::value_type const &"""
        return _AAL.IntVector_back(self)

    def assign(self, *args):
        """assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _AAL.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _AAL.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _AAL.IntVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntVector self, std::vector< int >::size_type n)"""
        return _AAL.IntVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntVector self) -> std::vector< int >::size_type"""
        return _AAL.IntVector_capacity(self)

    __swig_destroy__ = _AAL.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _AAL.IntVector_swigregister
IntVector_swigregister(IntVector)

class DecompositionMemberVector(_object):
    """Proxy of C++ std::vector<(AAL::DecompositionMember)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompositionMemberVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecompositionMemberVector, name)
    def iterator(self):
        """iterator(DecompositionMemberVector self) -> SwigPyIterator"""
        return _AAL.DecompositionMemberVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(DecompositionMemberVector self) -> bool"""
        return _AAL.DecompositionMemberVector___nonzero__(self)

    def __bool__(self):
        """__bool__(DecompositionMemberVector self) -> bool"""
        return _AAL.DecompositionMemberVector___bool__(self)

    def __len__(self):
        """__len__(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::size_type"""
        return _AAL.DecompositionMemberVector___len__(self)

    def pop(self):
        """pop(DecompositionMemberVector self) -> DecompositionMember"""
        return _AAL.DecompositionMemberVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i, std::vector< AAL::DecompositionMember >::difference_type j) -> DecompositionMemberVector"""
        return _AAL.DecompositionMemberVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i, std::vector< AAL::DecompositionMember >::difference_type j, 
            DecompositionMemberVector v=std::vector< AAL::DecompositionMember,std::allocator< AAL::DecompositionMember > >())
        __setslice__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i, std::vector< AAL::DecompositionMember >::difference_type j)
        """
        return _AAL.DecompositionMemberVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i, std::vector< AAL::DecompositionMember >::difference_type j)"""
        return _AAL.DecompositionMemberVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i)
        __delitem__(DecompositionMemberVector self, PySliceObject * slice)
        """
        return _AAL.DecompositionMemberVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(DecompositionMemberVector self, PySliceObject * slice) -> DecompositionMemberVector
        __getitem__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i) -> DecompositionMember
        """
        return _AAL.DecompositionMemberVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(DecompositionMemberVector self, PySliceObject * slice, DecompositionMemberVector v)
        __setitem__(DecompositionMemberVector self, PySliceObject * slice)
        __setitem__(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::difference_type i, DecompositionMember x)
        """
        return _AAL.DecompositionMemberVector___setitem__(self, *args)

    def append(self, *args):
        """append(DecompositionMemberVector self, DecompositionMember x)"""
        return _AAL.DecompositionMemberVector_append(self, *args)

    def empty(self):
        """empty(DecompositionMemberVector self) -> bool"""
        return _AAL.DecompositionMemberVector_empty(self)

    def size(self):
        """size(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::size_type"""
        return _AAL.DecompositionMemberVector_size(self)

    def clear(self):
        """clear(DecompositionMemberVector self)"""
        return _AAL.DecompositionMemberVector_clear(self)

    def swap(self, *args):
        """swap(DecompositionMemberVector self, DecompositionMemberVector v)"""
        return _AAL.DecompositionMemberVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::allocator_type"""
        return _AAL.DecompositionMemberVector_get_allocator(self)

    def begin(self):
        """begin(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::iterator"""
        return _AAL.DecompositionMemberVector_begin(self)

    def end(self):
        """end(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::iterator"""
        return _AAL.DecompositionMemberVector_end(self)

    def rbegin(self):
        """rbegin(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::reverse_iterator"""
        return _AAL.DecompositionMemberVector_rbegin(self)

    def rend(self):
        """rend(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::reverse_iterator"""
        return _AAL.DecompositionMemberVector_rend(self)

    def pop_back(self):
        """pop_back(DecompositionMemberVector self)"""
        return _AAL.DecompositionMemberVector_pop_back(self)

    def erase(self, *args):
        """
        erase(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::iterator pos) -> std::vector< AAL::DecompositionMember >::iterator
        erase(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::iterator first, std::vector< AAL::DecompositionMember >::iterator last) -> std::vector< AAL::DecompositionMember >::iterator
        """
        return _AAL.DecompositionMemberVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(AAL::DecompositionMember)> self) -> DecompositionMemberVector
        __init__(std::vector<(AAL::DecompositionMember)> self, DecompositionMemberVector arg2) -> DecompositionMemberVector
        __init__(std::vector<(AAL::DecompositionMember)> self, std::vector< AAL::DecompositionMember >::size_type size) -> DecompositionMemberVector
        __init__(std::vector<(AAL::DecompositionMember)> self, std::vector< AAL::DecompositionMember >::size_type size, DecompositionMember value) -> DecompositionMemberVector
        """
        this = _AAL.new_DecompositionMemberVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(DecompositionMemberVector self, DecompositionMember x)"""
        return _AAL.DecompositionMemberVector_push_back(self, *args)

    def front(self):
        """front(DecompositionMemberVector self) -> DecompositionMember"""
        return _AAL.DecompositionMemberVector_front(self)

    def back(self):
        """back(DecompositionMemberVector self) -> DecompositionMember"""
        return _AAL.DecompositionMemberVector_back(self)

    def assign(self, *args):
        """assign(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::size_type n, DecompositionMember x)"""
        return _AAL.DecompositionMemberVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::size_type new_size)
        resize(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::size_type new_size, DecompositionMember x)
        """
        return _AAL.DecompositionMemberVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::iterator pos, DecompositionMember x) -> std::vector< AAL::DecompositionMember >::iterator
        insert(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::iterator pos, std::vector< AAL::DecompositionMember >::size_type n, 
            DecompositionMember x)
        """
        return _AAL.DecompositionMemberVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(DecompositionMemberVector self, std::vector< AAL::DecompositionMember >::size_type n)"""
        return _AAL.DecompositionMemberVector_reserve(self, *args)

    def capacity(self):
        """capacity(DecompositionMemberVector self) -> std::vector< AAL::DecompositionMember >::size_type"""
        return _AAL.DecompositionMemberVector_capacity(self)

    def __repr__(self):
        """__repr__(DecompositionMemberVector self) -> char *"""
        return _AAL.DecompositionMemberVector___repr__(self)

    def toList(self):
        """toList(DecompositionMemberVector self) -> PyObject *"""
        return _AAL.DecompositionMemberVector_toList(self)

    __swig_destroy__ = _AAL.delete_DecompositionMemberVector
    __del__ = lambda self : None;
DecompositionMemberVector_swigregister = _AAL.DecompositionMemberVector_swigregister
DecompositionMemberVector_swigregister(DecompositionMemberVector)

class IntegerBinomVector(_object):
    """Proxy of C++ std::vector<(AAL::IntegerBinom)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerBinomVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerBinomVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntegerBinomVector self) -> SwigPyIterator"""
        return _AAL.IntegerBinomVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntegerBinomVector self) -> bool"""
        return _AAL.IntegerBinomVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntegerBinomVector self) -> bool"""
        return _AAL.IntegerBinomVector___bool__(self)

    def __len__(self):
        """__len__(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::size_type"""
        return _AAL.IntegerBinomVector___len__(self)

    def pop(self):
        """pop(IntegerBinomVector self) -> IntegerBinom"""
        return _AAL.IntegerBinomVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i, std::vector< AAL::IntegerBinom >::difference_type j) -> IntegerBinomVector"""
        return _AAL.IntegerBinomVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i, std::vector< AAL::IntegerBinom >::difference_type j, 
            IntegerBinomVector v=std::vector< AAL::IntegerBinom,std::allocator< AAL::IntegerBinom > >())
        __setslice__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i, std::vector< AAL::IntegerBinom >::difference_type j)
        """
        return _AAL.IntegerBinomVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i, std::vector< AAL::IntegerBinom >::difference_type j)"""
        return _AAL.IntegerBinomVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i)
        __delitem__(IntegerBinomVector self, PySliceObject * slice)
        """
        return _AAL.IntegerBinomVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntegerBinomVector self, PySliceObject * slice) -> IntegerBinomVector
        __getitem__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i) -> IntegerBinom
        """
        return _AAL.IntegerBinomVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntegerBinomVector self, PySliceObject * slice, IntegerBinomVector v)
        __setitem__(IntegerBinomVector self, PySliceObject * slice)
        __setitem__(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::difference_type i, IntegerBinom x)
        """
        return _AAL.IntegerBinomVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntegerBinomVector self, IntegerBinom x)"""
        return _AAL.IntegerBinomVector_append(self, *args)

    def empty(self):
        """empty(IntegerBinomVector self) -> bool"""
        return _AAL.IntegerBinomVector_empty(self)

    def size(self):
        """size(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::size_type"""
        return _AAL.IntegerBinomVector_size(self)

    def clear(self):
        """clear(IntegerBinomVector self)"""
        return _AAL.IntegerBinomVector_clear(self)

    def swap(self, *args):
        """swap(IntegerBinomVector self, IntegerBinomVector v)"""
        return _AAL.IntegerBinomVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::allocator_type"""
        return _AAL.IntegerBinomVector_get_allocator(self)

    def begin(self):
        """begin(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::iterator"""
        return _AAL.IntegerBinomVector_begin(self)

    def end(self):
        """end(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::iterator"""
        return _AAL.IntegerBinomVector_end(self)

    def rbegin(self):
        """rbegin(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::reverse_iterator"""
        return _AAL.IntegerBinomVector_rbegin(self)

    def rend(self):
        """rend(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::reverse_iterator"""
        return _AAL.IntegerBinomVector_rend(self)

    def pop_back(self):
        """pop_back(IntegerBinomVector self)"""
        return _AAL.IntegerBinomVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::iterator pos) -> std::vector< AAL::IntegerBinom >::iterator
        erase(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::iterator first, std::vector< AAL::IntegerBinom >::iterator last) -> std::vector< AAL::IntegerBinom >::iterator
        """
        return _AAL.IntegerBinomVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(AAL::IntegerBinom)> self) -> IntegerBinomVector
        __init__(std::vector<(AAL::IntegerBinom)> self, IntegerBinomVector arg2) -> IntegerBinomVector
        __init__(std::vector<(AAL::IntegerBinom)> self, std::vector< AAL::IntegerBinom >::size_type size) -> IntegerBinomVector
        __init__(std::vector<(AAL::IntegerBinom)> self, std::vector< AAL::IntegerBinom >::size_type size, IntegerBinom value) -> IntegerBinomVector
        """
        this = _AAL.new_IntegerBinomVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntegerBinomVector self, IntegerBinom x)"""
        return _AAL.IntegerBinomVector_push_back(self, *args)

    def front(self):
        """front(IntegerBinomVector self) -> IntegerBinom"""
        return _AAL.IntegerBinomVector_front(self)

    def back(self):
        """back(IntegerBinomVector self) -> IntegerBinom"""
        return _AAL.IntegerBinomVector_back(self)

    def assign(self, *args):
        """assign(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::size_type n, IntegerBinom x)"""
        return _AAL.IntegerBinomVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::size_type new_size)
        resize(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::size_type new_size, IntegerBinom x)
        """
        return _AAL.IntegerBinomVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::iterator pos, IntegerBinom x) -> std::vector< AAL::IntegerBinom >::iterator
        insert(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::iterator pos, std::vector< AAL::IntegerBinom >::size_type n, 
            IntegerBinom x)
        """
        return _AAL.IntegerBinomVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntegerBinomVector self, std::vector< AAL::IntegerBinom >::size_type n)"""
        return _AAL.IntegerBinomVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntegerBinomVector self) -> std::vector< AAL::IntegerBinom >::size_type"""
        return _AAL.IntegerBinomVector_capacity(self)

    __swig_destroy__ = _AAL.delete_IntegerBinomVector
    __del__ = lambda self : None;
IntegerBinomVector_swigregister = _AAL.IntegerBinomVector_swigregister
IntegerBinomVector_swigregister(IntegerBinomVector)

class IntegerBinomEllipticPointVector(_object):
    """Proxy of C++ std::vector<(AAL::IntegerBinomEllipticPoint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerBinomEllipticPointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerBinomEllipticPointVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntegerBinomEllipticPointVector self) -> SwigPyIterator"""
        return _AAL.IntegerBinomEllipticPointVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntegerBinomEllipticPointVector self) -> bool"""
        return _AAL.IntegerBinomEllipticPointVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntegerBinomEllipticPointVector self) -> bool"""
        return _AAL.IntegerBinomEllipticPointVector___bool__(self)

    def __len__(self):
        """__len__(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::size_type"""
        return _AAL.IntegerBinomEllipticPointVector___len__(self)

    def pop(self):
        """pop(IntegerBinomEllipticPointVector self) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPointVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type j) -> IntegerBinomEllipticPointVector"""
        return _AAL.IntegerBinomEllipticPointVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type j, 
            IntegerBinomEllipticPointVector v=std::vector< AAL::IntegerBinomEllipticPoint,std::allocator< AAL::IntegerBinomEllipticPoint > >())
        __setslice__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type j)
        """
        return _AAL.IntegerBinomEllipticPointVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type j)"""
        return _AAL.IntegerBinomEllipticPointVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i)
        __delitem__(IntegerBinomEllipticPointVector self, PySliceObject * slice)
        """
        return _AAL.IntegerBinomEllipticPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntegerBinomEllipticPointVector self, PySliceObject * slice) -> IntegerBinomEllipticPointVector
        __getitem__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i) -> IntegerBinomEllipticPoint
        """
        return _AAL.IntegerBinomEllipticPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntegerBinomEllipticPointVector self, PySliceObject * slice, IntegerBinomEllipticPointVector v)
        __setitem__(IntegerBinomEllipticPointVector self, PySliceObject * slice)
        __setitem__(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::difference_type i, IntegerBinomEllipticPoint x)
        """
        return _AAL.IntegerBinomEllipticPointVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntegerBinomEllipticPointVector self, IntegerBinomEllipticPoint x)"""
        return _AAL.IntegerBinomEllipticPointVector_append(self, *args)

    def empty(self):
        """empty(IntegerBinomEllipticPointVector self) -> bool"""
        return _AAL.IntegerBinomEllipticPointVector_empty(self)

    def size(self):
        """size(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::size_type"""
        return _AAL.IntegerBinomEllipticPointVector_size(self)

    def clear(self):
        """clear(IntegerBinomEllipticPointVector self)"""
        return _AAL.IntegerBinomEllipticPointVector_clear(self)

    def swap(self, *args):
        """swap(IntegerBinomEllipticPointVector self, IntegerBinomEllipticPointVector v)"""
        return _AAL.IntegerBinomEllipticPointVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::allocator_type"""
        return _AAL.IntegerBinomEllipticPointVector_get_allocator(self)

    def begin(self):
        """begin(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::iterator"""
        return _AAL.IntegerBinomEllipticPointVector_begin(self)

    def end(self):
        """end(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::iterator"""
        return _AAL.IntegerBinomEllipticPointVector_end(self)

    def rbegin(self):
        """rbegin(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::reverse_iterator"""
        return _AAL.IntegerBinomEllipticPointVector_rbegin(self)

    def rend(self):
        """rend(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::reverse_iterator"""
        return _AAL.IntegerBinomEllipticPointVector_rend(self)

    def pop_back(self):
        """pop_back(IntegerBinomEllipticPointVector self)"""
        return _AAL.IntegerBinomEllipticPointVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::iterator pos) -> std::vector< AAL::IntegerBinomEllipticPoint >::iterator
        erase(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::iterator first, std::vector< AAL::IntegerBinomEllipticPoint >::iterator last) -> std::vector< AAL::IntegerBinomEllipticPoint >::iterator
        """
        return _AAL.IntegerBinomEllipticPointVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(AAL::IntegerBinomEllipticPoint)> self) -> IntegerBinomEllipticPointVector
        __init__(std::vector<(AAL::IntegerBinomEllipticPoint)> self, IntegerBinomEllipticPointVector arg2) -> IntegerBinomEllipticPointVector
        __init__(std::vector<(AAL::IntegerBinomEllipticPoint)> self, std::vector< AAL::IntegerBinomEllipticPoint >::size_type size) -> IntegerBinomEllipticPointVector
        __init__(std::vector<(AAL::IntegerBinomEllipticPoint)> self, std::vector< AAL::IntegerBinomEllipticPoint >::size_type size, IntegerBinomEllipticPoint value) -> IntegerBinomEllipticPointVector
        """
        this = _AAL.new_IntegerBinomEllipticPointVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntegerBinomEllipticPointVector self, IntegerBinomEllipticPoint x)"""
        return _AAL.IntegerBinomEllipticPointVector_push_back(self, *args)

    def front(self):
        """front(IntegerBinomEllipticPointVector self) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPointVector_front(self)

    def back(self):
        """back(IntegerBinomEllipticPointVector self) -> IntegerBinomEllipticPoint"""
        return _AAL.IntegerBinomEllipticPointVector_back(self)

    def assign(self, *args):
        """assign(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::size_type n, IntegerBinomEllipticPoint x)"""
        return _AAL.IntegerBinomEllipticPointVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::size_type new_size)
        resize(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::size_type new_size, IntegerBinomEllipticPoint x)
        """
        return _AAL.IntegerBinomEllipticPointVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::iterator pos, IntegerBinomEllipticPoint x) -> std::vector< AAL::IntegerBinomEllipticPoint >::iterator
        insert(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::iterator pos, std::vector< AAL::IntegerBinomEllipticPoint >::size_type n, 
            IntegerBinomEllipticPoint x)
        """
        return _AAL.IntegerBinomEllipticPointVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntegerBinomEllipticPointVector self, std::vector< AAL::IntegerBinomEllipticPoint >::size_type n)"""
        return _AAL.IntegerBinomEllipticPointVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntegerBinomEllipticPointVector self) -> std::vector< AAL::IntegerBinomEllipticPoint >::size_type"""
        return _AAL.IntegerBinomEllipticPointVector_capacity(self)

    __swig_destroy__ = _AAL.delete_IntegerBinomEllipticPointVector
    __del__ = lambda self : None;
IntegerBinomEllipticPointVector_swigregister = _AAL.IntegerBinomEllipticPointVector_swigregister
IntegerBinomEllipticPointVector_swigregister(IntegerBinomEllipticPointVector)

class IntegerPVector(_object):
    """Proxy of C++ std::vector<(p.AAL::Integer)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerPVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerPVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntegerPVector self) -> SwigPyIterator"""
        return _AAL.IntegerPVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntegerPVector self) -> bool"""
        return _AAL.IntegerPVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntegerPVector self) -> bool"""
        return _AAL.IntegerPVector___bool__(self)

    def __len__(self):
        """__len__(IntegerPVector self) -> std::vector< AAL::Integer * >::size_type"""
        return _AAL.IntegerPVector___len__(self)

    def pop(self):
        """pop(IntegerPVector self) -> Integer"""
        return _AAL.IntegerPVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i, std::vector< AAL::Integer * >::difference_type j) -> IntegerPVector"""
        return _AAL.IntegerPVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i, std::vector< AAL::Integer * >::difference_type j, 
            IntegerPVector v=std::vector< AAL::Integer *,std::allocator< AAL::Integer * > >())
        __setslice__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i, std::vector< AAL::Integer * >::difference_type j)
        """
        return _AAL.IntegerPVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i, std::vector< AAL::Integer * >::difference_type j)"""
        return _AAL.IntegerPVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i)
        __delitem__(IntegerPVector self, PySliceObject * slice)
        """
        return _AAL.IntegerPVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntegerPVector self, PySliceObject * slice) -> IntegerPVector
        __getitem__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i) -> Integer
        """
        return _AAL.IntegerPVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntegerPVector self, PySliceObject * slice, IntegerPVector v)
        __setitem__(IntegerPVector self, PySliceObject * slice)
        __setitem__(IntegerPVector self, std::vector< AAL::Integer * >::difference_type i, Integer x)
        """
        return _AAL.IntegerPVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntegerPVector self, Integer x)"""
        return _AAL.IntegerPVector_append(self, *args)

    def empty(self):
        """empty(IntegerPVector self) -> bool"""
        return _AAL.IntegerPVector_empty(self)

    def size(self):
        """size(IntegerPVector self) -> std::vector< AAL::Integer * >::size_type"""
        return _AAL.IntegerPVector_size(self)

    def clear(self):
        """clear(IntegerPVector self)"""
        return _AAL.IntegerPVector_clear(self)

    def swap(self, *args):
        """swap(IntegerPVector self, IntegerPVector v)"""
        return _AAL.IntegerPVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntegerPVector self) -> std::vector< AAL::Integer * >::allocator_type"""
        return _AAL.IntegerPVector_get_allocator(self)

    def begin(self):
        """begin(IntegerPVector self) -> std::vector< AAL::Integer * >::iterator"""
        return _AAL.IntegerPVector_begin(self)

    def end(self):
        """end(IntegerPVector self) -> std::vector< AAL::Integer * >::iterator"""
        return _AAL.IntegerPVector_end(self)

    def rbegin(self):
        """rbegin(IntegerPVector self) -> std::vector< AAL::Integer * >::reverse_iterator"""
        return _AAL.IntegerPVector_rbegin(self)

    def rend(self):
        """rend(IntegerPVector self) -> std::vector< AAL::Integer * >::reverse_iterator"""
        return _AAL.IntegerPVector_rend(self)

    def pop_back(self):
        """pop_back(IntegerPVector self)"""
        return _AAL.IntegerPVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntegerPVector self, std::vector< AAL::Integer * >::iterator pos) -> std::vector< AAL::Integer * >::iterator
        erase(IntegerPVector self, std::vector< AAL::Integer * >::iterator first, std::vector< AAL::Integer * >::iterator last) -> std::vector< AAL::Integer * >::iterator
        """
        return _AAL.IntegerPVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.AAL::Integer)> self) -> IntegerPVector
        __init__(std::vector<(p.AAL::Integer)> self, IntegerPVector arg2) -> IntegerPVector
        __init__(std::vector<(p.AAL::Integer)> self, std::vector< AAL::Integer * >::size_type size) -> IntegerPVector
        __init__(std::vector<(p.AAL::Integer)> self, std::vector< AAL::Integer * >::size_type size, Integer value) -> IntegerPVector
        """
        this = _AAL.new_IntegerPVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntegerPVector self, Integer x)"""
        return _AAL.IntegerPVector_push_back(self, *args)

    def front(self):
        """front(IntegerPVector self) -> Integer"""
        return _AAL.IntegerPVector_front(self)

    def back(self):
        """back(IntegerPVector self) -> Integer"""
        return _AAL.IntegerPVector_back(self)

    def assign(self, *args):
        """assign(IntegerPVector self, std::vector< AAL::Integer * >::size_type n, Integer x)"""
        return _AAL.IntegerPVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntegerPVector self, std::vector< AAL::Integer * >::size_type new_size)
        resize(IntegerPVector self, std::vector< AAL::Integer * >::size_type new_size, Integer x)
        """
        return _AAL.IntegerPVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntegerPVector self, std::vector< AAL::Integer * >::iterator pos, Integer x) -> std::vector< AAL::Integer * >::iterator
        insert(IntegerPVector self, std::vector< AAL::Integer * >::iterator pos, std::vector< AAL::Integer * >::size_type n, 
            Integer x)
        """
        return _AAL.IntegerPVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntegerPVector self, std::vector< AAL::Integer * >::size_type n)"""
        return _AAL.IntegerPVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntegerPVector self) -> std::vector< AAL::Integer * >::size_type"""
        return _AAL.IntegerPVector_capacity(self)

    __swig_destroy__ = _AAL.delete_IntegerPVector
    __del__ = lambda self : None;
IntegerPVector_swigregister = _AAL.IntegerPVector_swigregister
IntegerPVector_swigregister(IntegerPVector)

class IntegerVector(_object):
    """Proxy of C++ std::vector<(AAL::Integer)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntegerVector self) -> SwigPyIterator"""
        return _AAL.IntegerVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntegerVector self) -> bool"""
        return _AAL.IntegerVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntegerVector self) -> bool"""
        return _AAL.IntegerVector___bool__(self)

    def __len__(self):
        """__len__(IntegerVector self) -> std::vector< AAL::Integer >::size_type"""
        return _AAL.IntegerVector___len__(self)

    def pop(self):
        """pop(IntegerVector self) -> Integer"""
        return _AAL.IntegerVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntegerVector self, std::vector< AAL::Integer >::difference_type i, std::vector< AAL::Integer >::difference_type j) -> IntegerVector"""
        return _AAL.IntegerVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntegerVector self, std::vector< AAL::Integer >::difference_type i, std::vector< AAL::Integer >::difference_type j, 
            IntegerVector v=std::vector< AAL::Integer,std::allocator< AAL::Integer > >())
        __setslice__(IntegerVector self, std::vector< AAL::Integer >::difference_type i, std::vector< AAL::Integer >::difference_type j)
        """
        return _AAL.IntegerVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntegerVector self, std::vector< AAL::Integer >::difference_type i, std::vector< AAL::Integer >::difference_type j)"""
        return _AAL.IntegerVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntegerVector self, std::vector< AAL::Integer >::difference_type i)
        __delitem__(IntegerVector self, PySliceObject * slice)
        """
        return _AAL.IntegerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntegerVector self, PySliceObject * slice) -> IntegerVector
        __getitem__(IntegerVector self, std::vector< AAL::Integer >::difference_type i) -> Integer
        """
        return _AAL.IntegerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntegerVector self, PySliceObject * slice, IntegerVector v)
        __setitem__(IntegerVector self, PySliceObject * slice)
        __setitem__(IntegerVector self, std::vector< AAL::Integer >::difference_type i, Integer x)
        """
        return _AAL.IntegerVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntegerVector self, Integer x)"""
        return _AAL.IntegerVector_append(self, *args)

    def empty(self):
        """empty(IntegerVector self) -> bool"""
        return _AAL.IntegerVector_empty(self)

    def size(self):
        """size(IntegerVector self) -> std::vector< AAL::Integer >::size_type"""
        return _AAL.IntegerVector_size(self)

    def clear(self):
        """clear(IntegerVector self)"""
        return _AAL.IntegerVector_clear(self)

    def swap(self, *args):
        """swap(IntegerVector self, IntegerVector v)"""
        return _AAL.IntegerVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntegerVector self) -> std::vector< AAL::Integer >::allocator_type"""
        return _AAL.IntegerVector_get_allocator(self)

    def begin(self):
        """begin(IntegerVector self) -> std::vector< AAL::Integer >::iterator"""
        return _AAL.IntegerVector_begin(self)

    def end(self):
        """end(IntegerVector self) -> std::vector< AAL::Integer >::iterator"""
        return _AAL.IntegerVector_end(self)

    def rbegin(self):
        """rbegin(IntegerVector self) -> std::vector< AAL::Integer >::reverse_iterator"""
        return _AAL.IntegerVector_rbegin(self)

    def rend(self):
        """rend(IntegerVector self) -> std::vector< AAL::Integer >::reverse_iterator"""
        return _AAL.IntegerVector_rend(self)

    def pop_back(self):
        """pop_back(IntegerVector self)"""
        return _AAL.IntegerVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntegerVector self, std::vector< AAL::Integer >::iterator pos) -> std::vector< AAL::Integer >::iterator
        erase(IntegerVector self, std::vector< AAL::Integer >::iterator first, std::vector< AAL::Integer >::iterator last) -> std::vector< AAL::Integer >::iterator
        """
        return _AAL.IntegerVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(AAL::Integer)> self) -> IntegerVector
        __init__(std::vector<(AAL::Integer)> self, IntegerVector arg2) -> IntegerVector
        __init__(std::vector<(AAL::Integer)> self, std::vector< AAL::Integer >::size_type size) -> IntegerVector
        __init__(std::vector<(AAL::Integer)> self, std::vector< AAL::Integer >::size_type size, Integer value) -> IntegerVector
        """
        this = _AAL.new_IntegerVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntegerVector self, Integer x)"""
        return _AAL.IntegerVector_push_back(self, *args)

    def front(self):
        """front(IntegerVector self) -> Integer"""
        return _AAL.IntegerVector_front(self)

    def back(self):
        """back(IntegerVector self) -> Integer"""
        return _AAL.IntegerVector_back(self)

    def assign(self, *args):
        """assign(IntegerVector self, std::vector< AAL::Integer >::size_type n, Integer x)"""
        return _AAL.IntegerVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntegerVector self, std::vector< AAL::Integer >::size_type new_size)
        resize(IntegerVector self, std::vector< AAL::Integer >::size_type new_size, Integer x)
        """
        return _AAL.IntegerVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntegerVector self, std::vector< AAL::Integer >::iterator pos, Integer x) -> std::vector< AAL::Integer >::iterator
        insert(IntegerVector self, std::vector< AAL::Integer >::iterator pos, std::vector< AAL::Integer >::size_type n, 
            Integer x)
        """
        return _AAL.IntegerVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntegerVector self, std::vector< AAL::Integer >::size_type n)"""
        return _AAL.IntegerVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntegerVector self) -> std::vector< AAL::Integer >::size_type"""
        return _AAL.IntegerVector_capacity(self)

    __swig_destroy__ = _AAL.delete_IntegerVector
    __del__ = lambda self : None;
IntegerVector_swigregister = _AAL.IntegerVector_swigregister
IntegerVector_swigregister(IntegerVector)

class PolynomPtr(_object):
    """Proxy of C++ PolynomPtr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomPtr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(PolynomPtr self) -> PolynomPtr"""
        this = _AAL.new_PolynomPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AAL.delete_PolynomPtr
    __del__ = lambda self : None;
    def assign(self, *args):
        """assign(PolynomPtr self, Polynom value)"""
        return _AAL.PolynomPtr_assign(self, *args)

    def value(self):
        """value(PolynomPtr self) -> Polynom"""
        return _AAL.PolynomPtr_value(self)

    def cast(self):
        """cast(PolynomPtr self) -> Polynom"""
        return _AAL.PolynomPtr_cast(self)

    def frompointer(*args):
        """frompointer(Polynom t) -> PolynomPtr"""
        return _AAL.PolynomPtr_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
PolynomPtr_swigregister = _AAL.PolynomPtr_swigregister
PolynomPtr_swigregister(PolynomPtr)

def PolynomPtr_frompointer(*args):
  """PolynomPtr_frompointer(Polynom t) -> PolynomPtr"""
  return _AAL.PolynomPtr_frompointer(*args)

Integer.ModAdd_ = Integer.ModAdd
Integer.ModAddInFp_ = Integer.ModAddInFp
Integer.ModSub_ = Integer.ModSub
Integer.SubInFp_ = Integer.SubInFp
Integer.ModMul_ = Integer.ModMul
Integer.MulInFp_ = Integer.MulInFp
Integer.ModDiv_ = Integer.ModDiv
Integer.DivInFp_ = Integer.DivInFp
Integer.ModPow_ = Integer.ModPow
Integer.PowInFp_ = Integer.PowInFp
Integer.ModSqrt_ = Integer.ModSqrt
Integer.Inverse_ = Integer.Inverse
Integer.InverseInFp_ = Integer.InverseInFp

temp = Integer()

Integer.ModAdd = lambda s,a,b,m: s.ModAdd_(a,b,m).Add(s,m) if temp.ModAdd_(a,b,m).isNegative() else s.ModAdd_(a,b,m)
Integer.ModAddInFp = lambda s,a,b,m: s.ModAddInFp_(a,b,m).Add(s,m) if temp.ModAddInFp_(a,b,m).isNegative() else s.ModAddInFp_(a,b,m)
Integer.ModSub = lambda s,a,b,m: s.ModSub_(a,b,m).Add(s,m) if temp.ModSub_(a,b,m).isNegative() else s.ModSub_(a,b,m)
Integer.SubInFp = lambda s,a,b,m: s.SubInFp_(a,b,m).Add(s,m) if temp.SubInFp_(a,b,m).isNegative() else s.SubInFp_(a,b,m)
Integer.ModMul = lambda s,a,b,m: s.ModMul_(a,b,m).Add(s,m) if temp.ModMul_(a,b,m).isNegative() else s.ModMul_(a,b,m)
Integer.MulInFp = lambda s,a,b,m: s.MulInFp_(a,b,m).Add(s,m) if temp.MulInFp_(a,b,m).isNegative() else s.MulInFp_(a,b,m)
Integer.ModDiv = lambda s,a,b,m: s.ModDiv_(a,b,m).Add(s,m) if temp.ModDiv_(a,b,m).isNegative() else s.ModDiv_(a,b,m)
Integer.DivInFp = lambda s,a,b,m: s.DivInFp_(a,b,m).Add(s,m) if temp.DivInFp_(a,b,m).isNegative() else s.DivInFp_(a,b,m)
Integer.ModPow = lambda s,a,b,m: s.ModPow_(a,b,m).Add(s,m) if temp.ModPow_(a,b,m).isNegative() else s.ModPow_(a,b,m)
Integer.PowInFp = lambda s,a,b,m: s.PowInFp_(a,b,m).Add(s,m) if temp.PowInFp_(a,b,m).isNegative() else s.PowInFp_(a,b,m)

Integer.ModSqrt = lambda s,a,m: s.ModSqrt_(a,m).Add(s,m) if temp.ModSqrt_(a,m).isNegative() else s.ModSqrt_(a,m)
Integer.Inverse = lambda s,a,m: s.Inverse_(a,m).Add(s,m) if temp.Inverse_(a,m).isNegative() else s.Inverse_(a,m)
Integer.InverseInFp = lambda s,a,m: s.InverseInFp_(a,m).Add(s,m) if temp.InverseInFp_(a,m).isNegative() else s.InverseInFp_(a,m)


SuperSingularEllipticCurve.getOrder = lambda curve: curve.getOrd(curve.getModule().ToString().rfind('1'))

# This file is compatible with both classic and new-style classes.


