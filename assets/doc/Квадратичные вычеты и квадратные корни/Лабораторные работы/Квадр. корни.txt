print "Программа извлечения квадратных корней по составному модулю"
p=Integer("5")
q=Integer("7")
print "ВХОД:"
print "Два простых числа p=", p,"and q=",q
n=Integer()
print "Составной модуль n=p*q=:", n.Mul(p,q)
x=Integer("4")
print "Квадратичный вычет по модулю  n",x
print "ВЫХОД:"
print "Четыре квадратных корня из c по модулю n."
print "ПРЕДУПРЕЖДЕНИЕ: если x не является квадратичным вычетом, выход не достоверен!"
print "ВЫЧИСЛЕНИЯ:"
gcd=Integer()
a=Integer()
b=Integer()
print "Решим диофантово уравнение ap+bq=gcd, gcd=", gcd.ExEuclid(p,q,a,b),"a=",a, "b=", b
ap=Integer()
bq=Integer()
print "Вычислим ap по модулю n ap=",ap.ModMul(a,p,n)
print "Вычислим bq по модулю n bq=",bq.ModMul(b,q,n)
x1=Integer()
x2=Integer()
y1=Integer()
y2=Integer()
print "Вычислим квадратный корень из x по модулю p x1=",x1.ModSqrt(x,p)
print "Вычислим квадратный корень из x по модулю q y1=",y1.ModSqrt(x,q)
print "Вычислим квадратный корень из x по модулю p x2=",x2.SubInFp(p,x1,p)
print "Вычислим квадратный корень из x по модулю q y2=",y2.SubInFp(q,y1,q)
x1bq=Integer()
x2bq=Integer()
y1ap=Integer()
y2ap=Integer()
print "Вычислим x1*bq mod n x1bq=" , x1bq.ModMul(x1,bq,n) 
print "Вычислим x2*bq mod n x2bq=" , x2bq.ModMul(x2,bq,n) 
print "Вычислим y1*ap mod n y1ap=" , y1ap.ModMul(y1,ap,n) 
print "Вычислим y2*ap mod n y2ap=" , y2ap.ModMul(y2,ap,n) 
u1=Integer()
u2=Integer()
u3=Integer()
u4=Integer()
print "ВЫХОД: (достоверен, если с есть квадоатичный вычет по модулю n)"
print "Вычислим первый квадратный корень из x по модулю n", u1.ModAdd(x1bq,y1ap,n)
print "Вычислим первый квадратный корень из x по модулю n", u2.ModAdd(x1bq,y2ap,n)
print "Вычислим первый квадратный корень из x по модулю n", u3.ModAdd(x2bq,y1ap,n)
print "Вычислим первый квадратный корень из x по модулю n", u4.ModAdd(x2bq,y2ap,n)

